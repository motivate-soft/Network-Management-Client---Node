/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var error_pb = require('./error_pb.js');
goog.object.extend(proto, error_pb);
goog.exportSymbol('proto.DashboardData', null, global);
goog.exportSymbol('proto.DashboardDataRequest', null, global);
goog.exportSymbol('proto.DashboardTopPorts', null, global);
goog.exportSymbol('proto.DashboardTopPortsRequest', null, global);
goog.exportSymbol('proto.ProtocolInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DashboardDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DashboardDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DashboardDataRequest.displayName = 'proto.DashboardDataRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DashboardDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DashboardDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DashboardDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DashboardDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hasPeerOutput: jspb.Message.getFieldWithDefault(msg, 2, false),
    peerOutput: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DashboardDataRequest}
 */
proto.DashboardDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DashboardDataRequest;
  return proto.DashboardDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DashboardDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DashboardDataRequest}
 */
proto.DashboardDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasPeerOutput(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPeerOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DashboardDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DashboardDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DashboardDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DashboardDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHasPeerOutput();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPeerOutput();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.DashboardDataRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DashboardDataRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool has_peer_output = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DashboardDataRequest.prototype.getHasPeerOutput = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.DashboardDataRequest.prototype.setHasPeerOutput = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 peer_output = 3;
 * @return {number}
 */
proto.DashboardDataRequest.prototype.getPeerOutput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.DashboardDataRequest.prototype.setPeerOutput = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DashboardData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.DashboardData.oneofGroups_);
};
goog.inherits(proto.DashboardData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DashboardData.displayName = 'proto.DashboardData';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.DashboardData.oneofGroups_ = [[8,9],[10,11]];

/**
 * @enum {number}
 */
proto.DashboardData.BpLossCase = {
  BP_LOSS_NOT_SET: 0,
  BP_WAN_RX_BYTES: 8,
  LOSS: 9
};

/**
 * @return {proto.DashboardData.BpLossCase}
 */
proto.DashboardData.prototype.getBpLossCase = function() {
  return /** @type {proto.DashboardData.BpLossCase} */(jspb.Message.computeOneofCase(this, proto.DashboardData.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.DashboardData.BpRttCase = {
  BP_RTT_NOT_SET: 0,
  BP_WAN_TX_BYTES: 10,
  RTT: 11
};

/**
 * @return {proto.DashboardData.BpRttCase}
 */
proto.DashboardData.prototype.getBpRttCase = function() {
  return /** @type {proto.DashboardData.BpRttCase} */(jspb.Message.computeOneofCase(this, proto.DashboardData.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DashboardData.prototype.toObject = function(opt_includeInstance) {
  return proto.DashboardData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DashboardData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DashboardData.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    ts: jspb.Message.getFieldWithDefault(msg, 3, 0),
    opWanTxBytes: jspb.Message.getFieldWithDefault(msg, 4, 0),
    opLanRxBytes: jspb.Message.getFieldWithDefault(msg, 5, 0),
    opWanRxBytes: jspb.Message.getFieldWithDefault(msg, 6, 0),
    opLanTxBytes: jspb.Message.getFieldWithDefault(msg, 7, 0),
    bpWanRxBytes: jspb.Message.getFieldWithDefault(msg, 8, 0),
    loss: jspb.Message.getFieldWithDefault(msg, 9, 0),
    bpWanTxBytes: jspb.Message.getFieldWithDefault(msg, 10, 0),
    rtt: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DashboardData}
 */
proto.DashboardData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DashboardData;
  return proto.DashboardData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DashboardData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DashboardData}
 */
proto.DashboardData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOpWanTxBytes(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOpLanRxBytes(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOpWanRxBytes(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOpLanTxBytes(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBpWanRxBytes(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLoss(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBpWanTxBytes(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRtt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DashboardData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DashboardData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DashboardData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DashboardData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getTs();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOpWanTxBytes();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getOpLanRxBytes();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getOpWanRxBytes();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getOpLanTxBytes();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.DashboardData.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DashboardData.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.DashboardData.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.DashboardData.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.DashboardData.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DashboardData.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 ts = 3;
 * @return {number}
 */
proto.DashboardData.prototype.getTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.DashboardData.prototype.setTs = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 op_wan_tx_bytes = 4;
 * @return {number}
 */
proto.DashboardData.prototype.getOpWanTxBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.DashboardData.prototype.setOpWanTxBytes = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 op_lan_rx_bytes = 5;
 * @return {number}
 */
proto.DashboardData.prototype.getOpLanRxBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.DashboardData.prototype.setOpLanRxBytes = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 op_wan_rx_bytes = 6;
 * @return {number}
 */
proto.DashboardData.prototype.getOpWanRxBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.DashboardData.prototype.setOpWanRxBytes = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 op_lan_tx_bytes = 7;
 * @return {number}
 */
proto.DashboardData.prototype.getOpLanTxBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.DashboardData.prototype.setOpLanTxBytes = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 bp_wan_rx_bytes = 8;
 * @return {number}
 */
proto.DashboardData.prototype.getBpWanRxBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.DashboardData.prototype.setBpWanRxBytes = function(value) {
  jspb.Message.setOneofField(this, 8, proto.DashboardData.oneofGroups_[0], value);
};


proto.DashboardData.prototype.clearBpWanRxBytes = function() {
  jspb.Message.setOneofField(this, 8, proto.DashboardData.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DashboardData.prototype.hasBpWanRxBytes = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 loss = 9;
 * @return {number}
 */
proto.DashboardData.prototype.getLoss = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.DashboardData.prototype.setLoss = function(value) {
  jspb.Message.setOneofField(this, 9, proto.DashboardData.oneofGroups_[0], value);
};


proto.DashboardData.prototype.clearLoss = function() {
  jspb.Message.setOneofField(this, 9, proto.DashboardData.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DashboardData.prototype.hasLoss = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint64 bp_wan_tx_bytes = 10;
 * @return {number}
 */
proto.DashboardData.prototype.getBpWanTxBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.DashboardData.prototype.setBpWanTxBytes = function(value) {
  jspb.Message.setOneofField(this, 10, proto.DashboardData.oneofGroups_[1], value);
};


proto.DashboardData.prototype.clearBpWanTxBytes = function() {
  jspb.Message.setOneofField(this, 10, proto.DashboardData.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DashboardData.prototype.hasBpWanTxBytes = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 rtt = 11;
 * @return {number}
 */
proto.DashboardData.prototype.getRtt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.DashboardData.prototype.setRtt = function(value) {
  jspb.Message.setOneofField(this, 11, proto.DashboardData.oneofGroups_[1], value);
};


proto.DashboardData.prototype.clearRtt = function() {
  jspb.Message.setOneofField(this, 11, proto.DashboardData.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DashboardData.prototype.hasRtt = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DashboardTopPortsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DashboardTopPortsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DashboardTopPortsRequest.displayName = 'proto.DashboardTopPortsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DashboardTopPortsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DashboardTopPortsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DashboardTopPortsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DashboardTopPortsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timeSpanSeconds: jspb.Message.getFieldWithDefault(msg, 2, 0),
    topN: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hasPeerOutput: jspb.Message.getFieldWithDefault(msg, 4, false),
    peerOutput: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DashboardTopPortsRequest}
 */
proto.DashboardTopPortsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DashboardTopPortsRequest;
  return proto.DashboardTopPortsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DashboardTopPortsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DashboardTopPortsRequest}
 */
proto.DashboardTopPortsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeSpanSeconds(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTopN(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasPeerOutput(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPeerOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DashboardTopPortsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DashboardTopPortsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DashboardTopPortsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DashboardTopPortsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTimeSpanSeconds();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTopN();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHasPeerOutput();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPeerOutput();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.DashboardTopPortsRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DashboardTopPortsRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 time_span_seconds = 2;
 * @return {number}
 */
proto.DashboardTopPortsRequest.prototype.getTimeSpanSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.DashboardTopPortsRequest.prototype.setTimeSpanSeconds = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 top_n = 3;
 * @return {number}
 */
proto.DashboardTopPortsRequest.prototype.getTopN = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.DashboardTopPortsRequest.prototype.setTopN = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool has_peer_output = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DashboardTopPortsRequest.prototype.getHasPeerOutput = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.DashboardTopPortsRequest.prototype.setHasPeerOutput = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint32 peer_output = 5;
 * @return {number}
 */
proto.DashboardTopPortsRequest.prototype.getPeerOutput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.DashboardTopPortsRequest.prototype.setPeerOutput = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DashboardTopPorts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DashboardTopPorts.repeatedFields_, null);
};
goog.inherits(proto.DashboardTopPorts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DashboardTopPorts.displayName = 'proto.DashboardTopPorts';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DashboardTopPorts.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DashboardTopPorts.prototype.toObject = function(opt_includeInstance) {
  return proto.DashboardTopPorts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DashboardTopPorts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DashboardTopPorts.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    protocolList: jspb.Message.toObjectList(msg.getProtocolList(),
    proto.ProtocolInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DashboardTopPorts}
 */
proto.DashboardTopPorts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DashboardTopPorts;
  return proto.DashboardTopPorts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DashboardTopPorts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DashboardTopPorts}
 */
proto.DashboardTopPorts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.ProtocolInfo;
      reader.readMessage(value,proto.ProtocolInfo.deserializeBinaryFromReader);
      msg.addProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DashboardTopPorts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DashboardTopPorts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DashboardTopPorts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DashboardTopPorts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getProtocolList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ProtocolInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.DashboardTopPorts.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DashboardTopPorts.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.DashboardTopPorts.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.DashboardTopPorts.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.DashboardTopPorts.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DashboardTopPorts.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ProtocolInfo protocol = 3;
 * @return {!Array<!proto.ProtocolInfo>}
 */
proto.DashboardTopPorts.prototype.getProtocolList = function() {
  return /** @type{!Array<!proto.ProtocolInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtocolInfo, 3));
};


/** @param {!Array<!proto.ProtocolInfo>} value */
proto.DashboardTopPorts.prototype.setProtocolList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ProtocolInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtocolInfo}
 */
proto.DashboardTopPorts.prototype.addProtocol = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ProtocolInfo, opt_index);
};


proto.DashboardTopPorts.prototype.clearProtocolList = function() {
  this.setProtocolList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtocolInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtocolInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProtocolInfo.displayName = 'proto.ProtocolInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtocolInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtocolInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtocolInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtocolInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lanBytes: jspb.Message.getFieldWithDefault(msg, 2, 0),
    wanBytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    percentage: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    port: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtocolInfo}
 */
proto.ProtocolInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtocolInfo;
  return proto.ProtocolInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtocolInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtocolInfo}
 */
proto.ProtocolInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLanBytes(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWanBytes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercentage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtocolInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtocolInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtocolInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtocolInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLanBytes();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getWanBytes();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPercentage();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.ProtocolInfo.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ProtocolInfo.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 lan_bytes = 2;
 * @return {number}
 */
proto.ProtocolInfo.prototype.getLanBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ProtocolInfo.prototype.setLanBytes = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 wan_bytes = 3;
 * @return {number}
 */
proto.ProtocolInfo.prototype.getWanBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ProtocolInfo.prototype.setWanBytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional double percentage = 4;
 * @return {number}
 */
proto.ProtocolInfo.prototype.getPercentage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.ProtocolInfo.prototype.setPercentage = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional uint32 port = 5;
 * @return {number}
 */
proto.ProtocolInfo.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ProtocolInfo.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


goog.object.extend(exports, proto);
