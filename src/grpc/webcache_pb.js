/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var error_pb = require('./error_pb.js');
goog.object.extend(proto, error_pb);
goog.exportSymbol('proto.WebcacheDateFilter', null, global);
goog.exportSymbol('proto.WebcacheDates', null, global);
goog.exportSymbol('proto.WebcacheDatesRequest', null, global);
goog.exportSymbol('proto.WebcacheDenied', null, global);
goog.exportSymbol('proto.WebcacheDeniedRequest', null, global);
goog.exportSymbol('proto.WebcacheDeniedUrl', null, global);
goog.exportSymbol('proto.WebcacheDomain', null, global);
goog.exportSymbol('proto.WebcacheDomainUser', null, global);
goog.exportSymbol('proto.WebcacheDomains', null, global);
goog.exportSymbol('proto.WebcacheDomainsRequest', null, global);
goog.exportSymbol('proto.WebcacheMimeType', null, global);
goog.exportSymbol('proto.WebcacheMimeTypes', null, global);
goog.exportSymbol('proto.WebcacheMimeTypesRequest', null, global);
goog.exportSymbol('proto.WebcacheMonth', null, global);
goog.exportSymbol('proto.WebcacheNetwork', null, global);
goog.exportSymbol('proto.WebcacheNetworkDetail', null, global);
goog.exportSymbol('proto.WebcacheNetworkDetailRequest', null, global);
goog.exportSymbol('proto.WebcacheNetworkPeriod', null, global);
goog.exportSymbol('proto.WebcacheNetworks', null, global);
goog.exportSymbol('proto.WebcacheNetworksRequest', null, global);
goog.exportSymbol('proto.WebcacheOrderByEnum', null, global);
goog.exportSymbol('proto.WebcacheTotals', null, global);
goog.exportSymbol('proto.WebcacheTotalsPeriod', null, global);
goog.exportSymbol('proto.WebcacheTotalsRequest', null, global);
goog.exportSymbol('proto.WebcacheUrl', null, global);
goog.exportSymbol('proto.WebcacheUrls', null, global);
goog.exportSymbol('proto.WebcacheUrlsRequest', null, global);
goog.exportSymbol('proto.WebcacheUser', null, global);
goog.exportSymbol('proto.WebcacheUserDetail', null, global);
goog.exportSymbol('proto.WebcacheUserDetailPeriod', null, global);
goog.exportSymbol('proto.WebcacheUserDetailRequest', null, global);
goog.exportSymbol('proto.WebcacheUsers', null, global);
goog.exportSymbol('proto.WebcacheUsersRequest', null, global);
goog.exportSymbol('proto.WebcacheYear', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheDateFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheDateFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheDateFilter.displayName = 'proto.WebcacheDateFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheDateFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheDateFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheDateFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDateFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    year: jspb.Message.getFieldWithDefault(msg, 1, 0),
    month: jspb.Message.getFieldWithDefault(msg, 2, 0),
    day: jspb.Message.getFieldWithDefault(msg, 3, 0),
    week: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheDateFilter}
 */
proto.WebcacheDateFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheDateFilter;
  return proto.WebcacheDateFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheDateFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheDateFilter}
 */
proto.WebcacheDateFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setYear(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMonth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDay(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeek(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheDateFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheDateFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheDateFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDateFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYear();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMonth();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDay();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getWeek();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 year = 1;
 * @return {number}
 */
proto.WebcacheDateFilter.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheDateFilter.prototype.setYear = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 month = 2;
 * @return {number}
 */
proto.WebcacheDateFilter.prototype.getMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WebcacheDateFilter.prototype.setMonth = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 day = 3;
 * @return {number}
 */
proto.WebcacheDateFilter.prototype.getDay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WebcacheDateFilter.prototype.setDay = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 week = 4;
 * @return {number}
 */
proto.WebcacheDateFilter.prototype.getWeek = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.WebcacheDateFilter.prototype.setWeek = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheMimeTypesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheMimeTypesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheMimeTypesRequest.displayName = 'proto.WebcacheMimeTypesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheMimeTypesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheMimeTypesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheMimeTypesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheMimeTypesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dateFilter: (f = msg.getDateFilter()) && proto.WebcacheDateFilter.toObject(includeInstance, f),
    orderBy: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheMimeTypesRequest}
 */
proto.WebcacheMimeTypesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheMimeTypesRequest;
  return proto.WebcacheMimeTypesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheMimeTypesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheMimeTypesRequest}
 */
proto.WebcacheMimeTypesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.WebcacheDateFilter;
      reader.readMessage(value,proto.WebcacheDateFilter.deserializeBinaryFromReader);
      msg.setDateFilter(value);
      break;
    case 3:
      var value = /** @type {!proto.WebcacheOrderByEnum} */ (reader.readEnum());
      msg.setOrderBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheMimeTypesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheMimeTypesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheMimeTypesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheMimeTypesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDateFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WebcacheDateFilter.serializeBinaryToWriter
    );
  }
  f = message.getOrderBy();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheMimeTypesRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheMimeTypesRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional WebcacheDateFilter date_filter = 2;
 * @return {?proto.WebcacheDateFilter}
 */
proto.WebcacheMimeTypesRequest.prototype.getDateFilter = function() {
  return /** @type{?proto.WebcacheDateFilter} */ (
    jspb.Message.getWrapperField(this, proto.WebcacheDateFilter, 2));
};


/** @param {?proto.WebcacheDateFilter|undefined} value */
proto.WebcacheMimeTypesRequest.prototype.setDateFilter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheMimeTypesRequest.prototype.clearDateFilter = function() {
  this.setDateFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheMimeTypesRequest.prototype.hasDateFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WebcacheOrderByEnum order_by = 3;
 * @return {!proto.WebcacheOrderByEnum}
 */
proto.WebcacheMimeTypesRequest.prototype.getOrderBy = function() {
  return /** @type {!proto.WebcacheOrderByEnum} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.WebcacheOrderByEnum} value */
proto.WebcacheMimeTypesRequest.prototype.setOrderBy = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheMimeTypes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WebcacheMimeTypes.repeatedFields_, null);
};
goog.inherits(proto.WebcacheMimeTypes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheMimeTypes.displayName = 'proto.WebcacheMimeTypes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WebcacheMimeTypes.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheMimeTypes.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheMimeTypes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheMimeTypes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheMimeTypes.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    mimeTypeList: jspb.Message.toObjectList(msg.getMimeTypeList(),
    proto.WebcacheMimeType.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheMimeTypes}
 */
proto.WebcacheMimeTypes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheMimeTypes;
  return proto.WebcacheMimeTypes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheMimeTypes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheMimeTypes}
 */
proto.WebcacheMimeTypes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.WebcacheMimeType;
      reader.readMessage(value,proto.WebcacheMimeType.deserializeBinaryFromReader);
      msg.addMimeType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheMimeTypes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheMimeTypes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheMimeTypes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheMimeTypes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getMimeTypeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.WebcacheMimeType.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheMimeTypes.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheMimeTypes.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.WebcacheMimeTypes.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.WebcacheMimeTypes.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheMimeTypes.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheMimeTypes.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated WebcacheMimeType mime_type = 3;
 * @return {!Array<!proto.WebcacheMimeType>}
 */
proto.WebcacheMimeTypes.prototype.getMimeTypeList = function() {
  return /** @type{!Array<!proto.WebcacheMimeType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WebcacheMimeType, 3));
};


/** @param {!Array<!proto.WebcacheMimeType>} value */
proto.WebcacheMimeTypes.prototype.setMimeTypeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.WebcacheMimeType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WebcacheMimeType}
 */
proto.WebcacheMimeTypes.prototype.addMimeType = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.WebcacheMimeType, opt_index);
};


proto.WebcacheMimeTypes.prototype.clearMimeTypeList = function() {
  this.setMimeTypeList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheMimeType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheMimeType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheMimeType.displayName = 'proto.WebcacheMimeType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheMimeType.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheMimeType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheMimeType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheMimeType.toObject = function(includeInstance, msg) {
  var f, obj = {
    mimeType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requests: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bytes: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheMimeType}
 */
proto.WebcacheMimeType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheMimeType;
  return proto.WebcacheMimeType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheMimeType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheMimeType}
 */
proto.WebcacheMimeType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimeType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequests(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheMimeType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheMimeType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheMimeType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheMimeType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMimeType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequests();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBytes();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string mime_type = 1;
 * @return {string}
 */
proto.WebcacheMimeType.prototype.getMimeType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WebcacheMimeType.prototype.setMimeType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 requests = 2;
 * @return {number}
 */
proto.WebcacheMimeType.prototype.getRequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WebcacheMimeType.prototype.setRequests = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 bytes = 3;
 * @return {number}
 */
proto.WebcacheMimeType.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WebcacheMimeType.prototype.setBytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheNetworkDetailRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheNetworkDetailRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheNetworkDetailRequest.displayName = 'proto.WebcacheNetworkDetailRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheNetworkDetailRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheNetworkDetailRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheNetworkDetailRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheNetworkDetailRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dateFilter: (f = msg.getDateFilter()) && proto.WebcacheDateFilter.toObject(includeInstance, f),
    orderBy: jspb.Message.getFieldWithDefault(msg, 3, 0),
    network: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheNetworkDetailRequest}
 */
proto.WebcacheNetworkDetailRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheNetworkDetailRequest;
  return proto.WebcacheNetworkDetailRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheNetworkDetailRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheNetworkDetailRequest}
 */
proto.WebcacheNetworkDetailRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.WebcacheDateFilter;
      reader.readMessage(value,proto.WebcacheDateFilter.deserializeBinaryFromReader);
      msg.setDateFilter(value);
      break;
    case 3:
      var value = /** @type {!proto.WebcacheOrderByEnum} */ (reader.readEnum());
      msg.setOrderBy(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheNetworkDetailRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheNetworkDetailRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheNetworkDetailRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheNetworkDetailRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDateFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WebcacheDateFilter.serializeBinaryToWriter
    );
  }
  f = message.getOrderBy();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheNetworkDetailRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheNetworkDetailRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional WebcacheDateFilter date_filter = 2;
 * @return {?proto.WebcacheDateFilter}
 */
proto.WebcacheNetworkDetailRequest.prototype.getDateFilter = function() {
  return /** @type{?proto.WebcacheDateFilter} */ (
    jspb.Message.getWrapperField(this, proto.WebcacheDateFilter, 2));
};


/** @param {?proto.WebcacheDateFilter|undefined} value */
proto.WebcacheNetworkDetailRequest.prototype.setDateFilter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheNetworkDetailRequest.prototype.clearDateFilter = function() {
  this.setDateFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheNetworkDetailRequest.prototype.hasDateFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WebcacheOrderByEnum order_by = 3;
 * @return {!proto.WebcacheOrderByEnum}
 */
proto.WebcacheNetworkDetailRequest.prototype.getOrderBy = function() {
  return /** @type {!proto.WebcacheOrderByEnum} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.WebcacheOrderByEnum} value */
proto.WebcacheNetworkDetailRequest.prototype.setOrderBy = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string network = 4;
 * @return {string}
 */
proto.WebcacheNetworkDetailRequest.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.WebcacheNetworkDetailRequest.prototype.setNetwork = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheNetworkDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WebcacheNetworkDetail.repeatedFields_, null);
};
goog.inherits(proto.WebcacheNetworkDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheNetworkDetail.displayName = 'proto.WebcacheNetworkDetail';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WebcacheNetworkDetail.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheNetworkDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheNetworkDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheNetworkDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheNetworkDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    userList: jspb.Message.toObjectList(msg.getUserList(),
    proto.WebcacheUser.toObject, includeInstance),
    periodList: jspb.Message.toObjectList(msg.getPeriodList(),
    proto.WebcacheNetworkPeriod.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheNetworkDetail}
 */
proto.WebcacheNetworkDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheNetworkDetail;
  return proto.WebcacheNetworkDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheNetworkDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheNetworkDetail}
 */
proto.WebcacheNetworkDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.WebcacheUser;
      reader.readMessage(value,proto.WebcacheUser.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    case 4:
      var value = new proto.WebcacheNetworkPeriod;
      reader.readMessage(value,proto.WebcacheNetworkPeriod.deserializeBinaryFromReader);
      msg.addPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheNetworkDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheNetworkDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheNetworkDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheNetworkDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.WebcacheUser.serializeBinaryToWriter
    );
  }
  f = message.getPeriodList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.WebcacheNetworkPeriod.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheNetworkDetail.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheNetworkDetail.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.WebcacheNetworkDetail.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.WebcacheNetworkDetail.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheNetworkDetail.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheNetworkDetail.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated WebcacheUser user = 3;
 * @return {!Array<!proto.WebcacheUser>}
 */
proto.WebcacheNetworkDetail.prototype.getUserList = function() {
  return /** @type{!Array<!proto.WebcacheUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WebcacheUser, 3));
};


/** @param {!Array<!proto.WebcacheUser>} value */
proto.WebcacheNetworkDetail.prototype.setUserList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.WebcacheUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WebcacheUser}
 */
proto.WebcacheNetworkDetail.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.WebcacheUser, opt_index);
};


proto.WebcacheNetworkDetail.prototype.clearUserList = function() {
  this.setUserList([]);
};


/**
 * repeated WebcacheNetworkPeriod period = 4;
 * @return {!Array<!proto.WebcacheNetworkPeriod>}
 */
proto.WebcacheNetworkDetail.prototype.getPeriodList = function() {
  return /** @type{!Array<!proto.WebcacheNetworkPeriod>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WebcacheNetworkPeriod, 4));
};


/** @param {!Array<!proto.WebcacheNetworkPeriod>} value */
proto.WebcacheNetworkDetail.prototype.setPeriodList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.WebcacheNetworkPeriod=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WebcacheNetworkPeriod}
 */
proto.WebcacheNetworkDetail.prototype.addPeriod = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.WebcacheNetworkPeriod, opt_index);
};


proto.WebcacheNetworkDetail.prototype.clearPeriodList = function() {
  this.setPeriodList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheNetworkPeriod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheNetworkPeriod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheNetworkPeriod.displayName = 'proto.WebcacheNetworkPeriod';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheNetworkPeriod.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheNetworkPeriod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheNetworkPeriod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheNetworkPeriod.toObject = function(includeInstance, msg) {
  var f, obj = {
    period: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requests: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bytes: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheNetworkPeriod}
 */
proto.WebcacheNetworkPeriod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheNetworkPeriod;
  return proto.WebcacheNetworkPeriod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheNetworkPeriod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheNetworkPeriod}
 */
proto.WebcacheNetworkPeriod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPeriod(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequests(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheNetworkPeriod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheNetworkPeriod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheNetworkPeriod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheNetworkPeriod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeriod();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRequests();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBytes();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint32 period = 1;
 * @return {number}
 */
proto.WebcacheNetworkPeriod.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheNetworkPeriod.prototype.setPeriod = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 requests = 2;
 * @return {number}
 */
proto.WebcacheNetworkPeriod.prototype.getRequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WebcacheNetworkPeriod.prototype.setRequests = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 bytes = 3;
 * @return {number}
 */
proto.WebcacheNetworkPeriod.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WebcacheNetworkPeriod.prototype.setBytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheNetworksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheNetworksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheNetworksRequest.displayName = 'proto.WebcacheNetworksRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheNetworksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheNetworksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheNetworksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheNetworksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dateFilter: (f = msg.getDateFilter()) && proto.WebcacheDateFilter.toObject(includeInstance, f),
    orderBy: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheNetworksRequest}
 */
proto.WebcacheNetworksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheNetworksRequest;
  return proto.WebcacheNetworksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheNetworksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheNetworksRequest}
 */
proto.WebcacheNetworksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.WebcacheDateFilter;
      reader.readMessage(value,proto.WebcacheDateFilter.deserializeBinaryFromReader);
      msg.setDateFilter(value);
      break;
    case 3:
      var value = /** @type {!proto.WebcacheOrderByEnum} */ (reader.readEnum());
      msg.setOrderBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheNetworksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheNetworksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheNetworksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheNetworksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDateFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WebcacheDateFilter.serializeBinaryToWriter
    );
  }
  f = message.getOrderBy();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheNetworksRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheNetworksRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional WebcacheDateFilter date_filter = 2;
 * @return {?proto.WebcacheDateFilter}
 */
proto.WebcacheNetworksRequest.prototype.getDateFilter = function() {
  return /** @type{?proto.WebcacheDateFilter} */ (
    jspb.Message.getWrapperField(this, proto.WebcacheDateFilter, 2));
};


/** @param {?proto.WebcacheDateFilter|undefined} value */
proto.WebcacheNetworksRequest.prototype.setDateFilter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheNetworksRequest.prototype.clearDateFilter = function() {
  this.setDateFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheNetworksRequest.prototype.hasDateFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WebcacheOrderByEnum order_by = 3;
 * @return {!proto.WebcacheOrderByEnum}
 */
proto.WebcacheNetworksRequest.prototype.getOrderBy = function() {
  return /** @type {!proto.WebcacheOrderByEnum} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.WebcacheOrderByEnum} value */
proto.WebcacheNetworksRequest.prototype.setOrderBy = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheNetworks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WebcacheNetworks.repeatedFields_, null);
};
goog.inherits(proto.WebcacheNetworks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheNetworks.displayName = 'proto.WebcacheNetworks';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WebcacheNetworks.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheNetworks.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheNetworks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheNetworks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheNetworks.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    networkList: jspb.Message.toObjectList(msg.getNetworkList(),
    proto.WebcacheNetwork.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheNetworks}
 */
proto.WebcacheNetworks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheNetworks;
  return proto.WebcacheNetworks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheNetworks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheNetworks}
 */
proto.WebcacheNetworks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.WebcacheNetwork;
      reader.readMessage(value,proto.WebcacheNetwork.deserializeBinaryFromReader);
      msg.addNetwork(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheNetworks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheNetworks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheNetworks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheNetworks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getNetworkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.WebcacheNetwork.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheNetworks.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheNetworks.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.WebcacheNetworks.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.WebcacheNetworks.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheNetworks.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheNetworks.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated WebcacheNetwork network = 3;
 * @return {!Array<!proto.WebcacheNetwork>}
 */
proto.WebcacheNetworks.prototype.getNetworkList = function() {
  return /** @type{!Array<!proto.WebcacheNetwork>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WebcacheNetwork, 3));
};


/** @param {!Array<!proto.WebcacheNetwork>} value */
proto.WebcacheNetworks.prototype.setNetworkList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.WebcacheNetwork=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WebcacheNetwork}
 */
proto.WebcacheNetworks.prototype.addNetwork = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.WebcacheNetwork, opt_index);
};


proto.WebcacheNetworks.prototype.clearNetworkList = function() {
  this.setNetworkList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheNetwork = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheNetwork, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheNetwork.displayName = 'proto.WebcacheNetwork';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheNetwork.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheNetwork.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheNetwork} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheNetwork.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requests: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 4, 0),
    users: jspb.Message.getFieldWithDefault(msg, 5, 0),
    largestFileBytes: jspb.Message.getFieldWithDefault(msg, 6, 0),
    largestFileUrl: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheNetwork}
 */
proto.WebcacheNetwork.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheNetwork;
  return proto.WebcacheNetwork.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheNetwork} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheNetwork}
 */
proto.WebcacheNetwork.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequests(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDuration(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUsers(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLargestFileBytes(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLargestFileUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheNetwork.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheNetwork.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheNetwork} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheNetwork.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequests();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBytes();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getUsers();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getLargestFileBytes();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getLargestFileUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string network = 1;
 * @return {string}
 */
proto.WebcacheNetwork.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WebcacheNetwork.prototype.setNetwork = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 requests = 2;
 * @return {number}
 */
proto.WebcacheNetwork.prototype.getRequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WebcacheNetwork.prototype.setRequests = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 bytes = 3;
 * @return {number}
 */
proto.WebcacheNetwork.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WebcacheNetwork.prototype.setBytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 duration = 4;
 * @return {number}
 */
proto.WebcacheNetwork.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.WebcacheNetwork.prototype.setDuration = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 users = 5;
 * @return {number}
 */
proto.WebcacheNetwork.prototype.getUsers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.WebcacheNetwork.prototype.setUsers = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 largest_file_bytes = 6;
 * @return {number}
 */
proto.WebcacheNetwork.prototype.getLargestFileBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.WebcacheNetwork.prototype.setLargestFileBytes = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string largest_file_url = 7;
 * @return {string}
 */
proto.WebcacheNetwork.prototype.getLargestFileUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.WebcacheNetwork.prototype.setLargestFileUrl = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheUserDetailRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheUserDetailRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheUserDetailRequest.displayName = 'proto.WebcacheUserDetailRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheUserDetailRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheUserDetailRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheUserDetailRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUserDetailRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dateFilter: (f = msg.getDateFilter()) && proto.WebcacheDateFilter.toObject(includeInstance, f),
    orderBy: jspb.Message.getFieldWithDefault(msg, 3, 0),
    user: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheUserDetailRequest}
 */
proto.WebcacheUserDetailRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheUserDetailRequest;
  return proto.WebcacheUserDetailRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheUserDetailRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheUserDetailRequest}
 */
proto.WebcacheUserDetailRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.WebcacheDateFilter;
      reader.readMessage(value,proto.WebcacheDateFilter.deserializeBinaryFromReader);
      msg.setDateFilter(value);
      break;
    case 3:
      var value = /** @type {!proto.WebcacheOrderByEnum} */ (reader.readEnum());
      msg.setOrderBy(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheUserDetailRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheUserDetailRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheUserDetailRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUserDetailRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDateFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WebcacheDateFilter.serializeBinaryToWriter
    );
  }
  f = message.getOrderBy();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheUserDetailRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheUserDetailRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional WebcacheDateFilter date_filter = 2;
 * @return {?proto.WebcacheDateFilter}
 */
proto.WebcacheUserDetailRequest.prototype.getDateFilter = function() {
  return /** @type{?proto.WebcacheDateFilter} */ (
    jspb.Message.getWrapperField(this, proto.WebcacheDateFilter, 2));
};


/** @param {?proto.WebcacheDateFilter|undefined} value */
proto.WebcacheUserDetailRequest.prototype.setDateFilter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheUserDetailRequest.prototype.clearDateFilter = function() {
  this.setDateFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheUserDetailRequest.prototype.hasDateFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WebcacheOrderByEnum order_by = 3;
 * @return {!proto.WebcacheOrderByEnum}
 */
proto.WebcacheUserDetailRequest.prototype.getOrderBy = function() {
  return /** @type {!proto.WebcacheOrderByEnum} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.WebcacheOrderByEnum} value */
proto.WebcacheUserDetailRequest.prototype.setOrderBy = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string user = 4;
 * @return {string}
 */
proto.WebcacheUserDetailRequest.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.WebcacheUserDetailRequest.prototype.setUser = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheUserDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WebcacheUserDetail.repeatedFields_, null);
};
goog.inherits(proto.WebcacheUserDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheUserDetail.displayName = 'proto.WebcacheUserDetail';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WebcacheUserDetail.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheUserDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheUserDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheUserDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUserDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    urlList: jspb.Message.toObjectList(msg.getUrlList(),
    proto.WebcacheUrl.toObject, includeInstance),
    periodList: jspb.Message.toObjectList(msg.getPeriodList(),
    proto.WebcacheUserDetailPeriod.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheUserDetail}
 */
proto.WebcacheUserDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheUserDetail;
  return proto.WebcacheUserDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheUserDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheUserDetail}
 */
proto.WebcacheUserDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.WebcacheUrl;
      reader.readMessage(value,proto.WebcacheUrl.deserializeBinaryFromReader);
      msg.addUrl(value);
      break;
    case 4:
      var value = new proto.WebcacheUserDetailPeriod;
      reader.readMessage(value,proto.WebcacheUserDetailPeriod.deserializeBinaryFromReader);
      msg.addPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheUserDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheUserDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheUserDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUserDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getUrlList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.WebcacheUrl.serializeBinaryToWriter
    );
  }
  f = message.getPeriodList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.WebcacheUserDetailPeriod.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheUserDetail.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheUserDetail.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.WebcacheUserDetail.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.WebcacheUserDetail.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheUserDetail.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheUserDetail.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated WebcacheUrl url = 3;
 * @return {!Array<!proto.WebcacheUrl>}
 */
proto.WebcacheUserDetail.prototype.getUrlList = function() {
  return /** @type{!Array<!proto.WebcacheUrl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WebcacheUrl, 3));
};


/** @param {!Array<!proto.WebcacheUrl>} value */
proto.WebcacheUserDetail.prototype.setUrlList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.WebcacheUrl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WebcacheUrl}
 */
proto.WebcacheUserDetail.prototype.addUrl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.WebcacheUrl, opt_index);
};


proto.WebcacheUserDetail.prototype.clearUrlList = function() {
  this.setUrlList([]);
};


/**
 * repeated WebcacheUserDetailPeriod period = 4;
 * @return {!Array<!proto.WebcacheUserDetailPeriod>}
 */
proto.WebcacheUserDetail.prototype.getPeriodList = function() {
  return /** @type{!Array<!proto.WebcacheUserDetailPeriod>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WebcacheUserDetailPeriod, 4));
};


/** @param {!Array<!proto.WebcacheUserDetailPeriod>} value */
proto.WebcacheUserDetail.prototype.setPeriodList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.WebcacheUserDetailPeriod=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WebcacheUserDetailPeriod}
 */
proto.WebcacheUserDetail.prototype.addPeriod = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.WebcacheUserDetailPeriod, opt_index);
};


proto.WebcacheUserDetail.prototype.clearPeriodList = function() {
  this.setPeriodList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheUserDetailPeriod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheUserDetailPeriod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheUserDetailPeriod.displayName = 'proto.WebcacheUserDetailPeriod';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheUserDetailPeriod.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheUserDetailPeriod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheUserDetailPeriod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUserDetailPeriod.toObject = function(includeInstance, msg) {
  var f, obj = {
    period: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requests: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bytes: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheUserDetailPeriod}
 */
proto.WebcacheUserDetailPeriod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheUserDetailPeriod;
  return proto.WebcacheUserDetailPeriod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheUserDetailPeriod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheUserDetailPeriod}
 */
proto.WebcacheUserDetailPeriod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPeriod(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequests(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheUserDetailPeriod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheUserDetailPeriod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheUserDetailPeriod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUserDetailPeriod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeriod();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRequests();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBytes();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint32 period = 1;
 * @return {number}
 */
proto.WebcacheUserDetailPeriod.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheUserDetailPeriod.prototype.setPeriod = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 requests = 2;
 * @return {number}
 */
proto.WebcacheUserDetailPeriod.prototype.getRequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WebcacheUserDetailPeriod.prototype.setRequests = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 bytes = 3;
 * @return {number}
 */
proto.WebcacheUserDetailPeriod.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WebcacheUserDetailPeriod.prototype.setBytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheUsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheUsersRequest.displayName = 'proto.WebcacheUsersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheUsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheUsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dateFilter: (f = msg.getDateFilter()) && proto.WebcacheDateFilter.toObject(includeInstance, f),
    orderBy: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheUsersRequest}
 */
proto.WebcacheUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheUsersRequest;
  return proto.WebcacheUsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheUsersRequest}
 */
proto.WebcacheUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.WebcacheDateFilter;
      reader.readMessage(value,proto.WebcacheDateFilter.deserializeBinaryFromReader);
      msg.setDateFilter(value);
      break;
    case 3:
      var value = /** @type {!proto.WebcacheOrderByEnum} */ (reader.readEnum());
      msg.setOrderBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheUsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDateFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WebcacheDateFilter.serializeBinaryToWriter
    );
  }
  f = message.getOrderBy();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheUsersRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheUsersRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional WebcacheDateFilter date_filter = 2;
 * @return {?proto.WebcacheDateFilter}
 */
proto.WebcacheUsersRequest.prototype.getDateFilter = function() {
  return /** @type{?proto.WebcacheDateFilter} */ (
    jspb.Message.getWrapperField(this, proto.WebcacheDateFilter, 2));
};


/** @param {?proto.WebcacheDateFilter|undefined} value */
proto.WebcacheUsersRequest.prototype.setDateFilter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheUsersRequest.prototype.clearDateFilter = function() {
  this.setDateFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheUsersRequest.prototype.hasDateFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WebcacheOrderByEnum order_by = 3;
 * @return {!proto.WebcacheOrderByEnum}
 */
proto.WebcacheUsersRequest.prototype.getOrderBy = function() {
  return /** @type {!proto.WebcacheOrderByEnum} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.WebcacheOrderByEnum} value */
proto.WebcacheUsersRequest.prototype.setOrderBy = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheUsers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WebcacheUsers.repeatedFields_, null);
};
goog.inherits(proto.WebcacheUsers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheUsers.displayName = 'proto.WebcacheUsers';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WebcacheUsers.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheUsers.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheUsers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheUsers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUsers.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    userList: jspb.Message.toObjectList(msg.getUserList(),
    proto.WebcacheUser.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheUsers}
 */
proto.WebcacheUsers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheUsers;
  return proto.WebcacheUsers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheUsers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheUsers}
 */
proto.WebcacheUsers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.WebcacheUser;
      reader.readMessage(value,proto.WebcacheUser.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheUsers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheUsers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheUsers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUsers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.WebcacheUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheUsers.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheUsers.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.WebcacheUsers.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.WebcacheUsers.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheUsers.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheUsers.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated WebcacheUser user = 3;
 * @return {!Array<!proto.WebcacheUser>}
 */
proto.WebcacheUsers.prototype.getUserList = function() {
  return /** @type{!Array<!proto.WebcacheUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WebcacheUser, 3));
};


/** @param {!Array<!proto.WebcacheUser>} value */
proto.WebcacheUsers.prototype.setUserList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.WebcacheUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WebcacheUser}
 */
proto.WebcacheUsers.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.WebcacheUser, opt_index);
};


proto.WebcacheUsers.prototype.clearUserList = function() {
  this.setUserList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheUser.displayName = 'proto.WebcacheUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheUser.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requests: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 4, 0),
    largestFileBytes: jspb.Message.getFieldWithDefault(msg, 5, 0),
    largestFileUrl: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheUser}
 */
proto.WebcacheUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheUser;
  return proto.WebcacheUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheUser}
 */
proto.WebcacheUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequests(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDuration(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLargestFileBytes(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLargestFileUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequests();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBytes();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getLargestFileBytes();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getLargestFileUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string user = 1;
 * @return {string}
 */
proto.WebcacheUser.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WebcacheUser.prototype.setUser = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 requests = 2;
 * @return {number}
 */
proto.WebcacheUser.prototype.getRequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WebcacheUser.prototype.setRequests = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 bytes = 3;
 * @return {number}
 */
proto.WebcacheUser.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WebcacheUser.prototype.setBytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 duration = 4;
 * @return {number}
 */
proto.WebcacheUser.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.WebcacheUser.prototype.setDuration = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 largest_file_bytes = 5;
 * @return {number}
 */
proto.WebcacheUser.prototype.getLargestFileBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.WebcacheUser.prototype.setLargestFileBytes = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string largest_file_url = 6;
 * @return {string}
 */
proto.WebcacheUser.prototype.getLargestFileUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.WebcacheUser.prototype.setLargestFileUrl = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheDeniedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheDeniedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheDeniedRequest.displayName = 'proto.WebcacheDeniedRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheDeniedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheDeniedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheDeniedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDeniedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dateFilter: (f = msg.getDateFilter()) && proto.WebcacheDateFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheDeniedRequest}
 */
proto.WebcacheDeniedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheDeniedRequest;
  return proto.WebcacheDeniedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheDeniedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheDeniedRequest}
 */
proto.WebcacheDeniedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.WebcacheDateFilter;
      reader.readMessage(value,proto.WebcacheDateFilter.deserializeBinaryFromReader);
      msg.setDateFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheDeniedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheDeniedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheDeniedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDeniedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDateFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WebcacheDateFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheDeniedRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheDeniedRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional WebcacheDateFilter date_filter = 2;
 * @return {?proto.WebcacheDateFilter}
 */
proto.WebcacheDeniedRequest.prototype.getDateFilter = function() {
  return /** @type{?proto.WebcacheDateFilter} */ (
    jspb.Message.getWrapperField(this, proto.WebcacheDateFilter, 2));
};


/** @param {?proto.WebcacheDateFilter|undefined} value */
proto.WebcacheDeniedRequest.prototype.setDateFilter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheDeniedRequest.prototype.clearDateFilter = function() {
  this.setDateFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheDeniedRequest.prototype.hasDateFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheDenied = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WebcacheDenied.repeatedFields_, null);
};
goog.inherits(proto.WebcacheDenied, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheDenied.displayName = 'proto.WebcacheDenied';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WebcacheDenied.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheDenied.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheDenied.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheDenied} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDenied.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    deniedUrlList: jspb.Message.toObjectList(msg.getDeniedUrlList(),
    proto.WebcacheDeniedUrl.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheDenied}
 */
proto.WebcacheDenied.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheDenied;
  return proto.WebcacheDenied.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheDenied} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheDenied}
 */
proto.WebcacheDenied.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.WebcacheDeniedUrl;
      reader.readMessage(value,proto.WebcacheDeniedUrl.deserializeBinaryFromReader);
      msg.addDeniedUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheDenied.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheDenied.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheDenied} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDenied.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getDeniedUrlList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.WebcacheDeniedUrl.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheDenied.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheDenied.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.WebcacheDenied.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.WebcacheDenied.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheDenied.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheDenied.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated WebcacheDeniedUrl denied_url = 3;
 * @return {!Array<!proto.WebcacheDeniedUrl>}
 */
proto.WebcacheDenied.prototype.getDeniedUrlList = function() {
  return /** @type{!Array<!proto.WebcacheDeniedUrl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WebcacheDeniedUrl, 3));
};


/** @param {!Array<!proto.WebcacheDeniedUrl>} value */
proto.WebcacheDenied.prototype.setDeniedUrlList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.WebcacheDeniedUrl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WebcacheDeniedUrl}
 */
proto.WebcacheDenied.prototype.addDeniedUrl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.WebcacheDeniedUrl, opt_index);
};


proto.WebcacheDenied.prototype.clearDeniedUrlList = function() {
  this.setDeniedUrlList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheDeniedUrl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WebcacheDeniedUrl.repeatedFields_, null);
};
goog.inherits(proto.WebcacheDeniedUrl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheDeniedUrl.displayName = 'proto.WebcacheDeniedUrl';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WebcacheDeniedUrl.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheDeniedUrl.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheDeniedUrl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheDeniedUrl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDeniedUrl.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requests: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blacklistAclList: jspb.Message.getRepeatedField(msg, 3),
    userList: jspb.Message.toObjectList(msg.getUserList(),
    proto.WebcacheDomainUser.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheDeniedUrl}
 */
proto.WebcacheDeniedUrl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheDeniedUrl;
  return proto.WebcacheDeniedUrl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheDeniedUrl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheDeniedUrl}
 */
proto.WebcacheDeniedUrl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequests(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlacklistAcl(value);
      break;
    case 4:
      var value = new proto.WebcacheDomainUser;
      reader.readMessage(value,proto.WebcacheDomainUser.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheDeniedUrl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheDeniedUrl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheDeniedUrl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDeniedUrl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequests();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBlacklistAclList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.WebcacheDomainUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.WebcacheDeniedUrl.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WebcacheDeniedUrl.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 requests = 2;
 * @return {number}
 */
proto.WebcacheDeniedUrl.prototype.getRequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WebcacheDeniedUrl.prototype.setRequests = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string blacklist_acl = 3;
 * @return {!Array<string>}
 */
proto.WebcacheDeniedUrl.prototype.getBlacklistAclList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.WebcacheDeniedUrl.prototype.setBlacklistAclList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.WebcacheDeniedUrl.prototype.addBlacklistAcl = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.WebcacheDeniedUrl.prototype.clearBlacklistAclList = function() {
  this.setBlacklistAclList([]);
};


/**
 * repeated WebcacheDomainUser user = 4;
 * @return {!Array<!proto.WebcacheDomainUser>}
 */
proto.WebcacheDeniedUrl.prototype.getUserList = function() {
  return /** @type{!Array<!proto.WebcacheDomainUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WebcacheDomainUser, 4));
};


/** @param {!Array<!proto.WebcacheDomainUser>} value */
proto.WebcacheDeniedUrl.prototype.setUserList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.WebcacheDomainUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WebcacheDomainUser}
 */
proto.WebcacheDeniedUrl.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.WebcacheDomainUser, opt_index);
};


proto.WebcacheDeniedUrl.prototype.clearUserList = function() {
  this.setUserList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheUrlsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheUrlsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheUrlsRequest.displayName = 'proto.WebcacheUrlsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheUrlsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheUrlsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheUrlsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUrlsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dateFilter: (f = msg.getDateFilter()) && proto.WebcacheDateFilter.toObject(includeInstance, f),
    orderBy: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheUrlsRequest}
 */
proto.WebcacheUrlsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheUrlsRequest;
  return proto.WebcacheUrlsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheUrlsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheUrlsRequest}
 */
proto.WebcacheUrlsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.WebcacheDateFilter;
      reader.readMessage(value,proto.WebcacheDateFilter.deserializeBinaryFromReader);
      msg.setDateFilter(value);
      break;
    case 3:
      var value = /** @type {!proto.WebcacheOrderByEnum} */ (reader.readEnum());
      msg.setOrderBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheUrlsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheUrlsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheUrlsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUrlsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDateFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WebcacheDateFilter.serializeBinaryToWriter
    );
  }
  f = message.getOrderBy();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheUrlsRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheUrlsRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional WebcacheDateFilter date_filter = 2;
 * @return {?proto.WebcacheDateFilter}
 */
proto.WebcacheUrlsRequest.prototype.getDateFilter = function() {
  return /** @type{?proto.WebcacheDateFilter} */ (
    jspb.Message.getWrapperField(this, proto.WebcacheDateFilter, 2));
};


/** @param {?proto.WebcacheDateFilter|undefined} value */
proto.WebcacheUrlsRequest.prototype.setDateFilter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheUrlsRequest.prototype.clearDateFilter = function() {
  this.setDateFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheUrlsRequest.prototype.hasDateFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WebcacheOrderByEnum order_by = 3;
 * @return {!proto.WebcacheOrderByEnum}
 */
proto.WebcacheUrlsRequest.prototype.getOrderBy = function() {
  return /** @type {!proto.WebcacheOrderByEnum} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.WebcacheOrderByEnum} value */
proto.WebcacheUrlsRequest.prototype.setOrderBy = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheUrls = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WebcacheUrls.repeatedFields_, null);
};
goog.inherits(proto.WebcacheUrls, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheUrls.displayName = 'proto.WebcacheUrls';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WebcacheUrls.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheUrls.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheUrls.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheUrls} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUrls.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    urlList: jspb.Message.toObjectList(msg.getUrlList(),
    proto.WebcacheUrl.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheUrls}
 */
proto.WebcacheUrls.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheUrls;
  return proto.WebcacheUrls.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheUrls} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheUrls}
 */
proto.WebcacheUrls.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.WebcacheUrl;
      reader.readMessage(value,proto.WebcacheUrl.deserializeBinaryFromReader);
      msg.addUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheUrls.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheUrls.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheUrls} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUrls.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getUrlList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.WebcacheUrl.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheUrls.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheUrls.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.WebcacheUrls.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.WebcacheUrls.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheUrls.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheUrls.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated WebcacheUrl url = 3;
 * @return {!Array<!proto.WebcacheUrl>}
 */
proto.WebcacheUrls.prototype.getUrlList = function() {
  return /** @type{!Array<!proto.WebcacheUrl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WebcacheUrl, 3));
};


/** @param {!Array<!proto.WebcacheUrl>} value */
proto.WebcacheUrls.prototype.setUrlList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.WebcacheUrl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WebcacheUrl}
 */
proto.WebcacheUrls.prototype.addUrl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.WebcacheUrl, opt_index);
};


proto.WebcacheUrls.prototype.clearUrlList = function() {
  this.setUrlList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheUrl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheUrl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheUrl.displayName = 'proto.WebcacheUrl';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheUrl.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheUrl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheUrl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUrl.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requests: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheUrl}
 */
proto.WebcacheUrl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheUrl;
  return proto.WebcacheUrl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheUrl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheUrl}
 */
proto.WebcacheUrl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequests(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheUrl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheUrl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheUrl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheUrl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequests();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBytes();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.WebcacheUrl.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WebcacheUrl.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 requests = 2;
 * @return {number}
 */
proto.WebcacheUrl.prototype.getRequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WebcacheUrl.prototype.setRequests = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 bytes = 3;
 * @return {number}
 */
proto.WebcacheUrl.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WebcacheUrl.prototype.setBytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 duration = 4;
 * @return {number}
 */
proto.WebcacheUrl.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.WebcacheUrl.prototype.setDuration = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheDomainsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheDomainsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheDomainsRequest.displayName = 'proto.WebcacheDomainsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheDomainsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheDomainsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheDomainsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDomainsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dateFilter: (f = msg.getDateFilter()) && proto.WebcacheDateFilter.toObject(includeInstance, f),
    orderBy: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheDomainsRequest}
 */
proto.WebcacheDomainsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheDomainsRequest;
  return proto.WebcacheDomainsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheDomainsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheDomainsRequest}
 */
proto.WebcacheDomainsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.WebcacheDateFilter;
      reader.readMessage(value,proto.WebcacheDateFilter.deserializeBinaryFromReader);
      msg.setDateFilter(value);
      break;
    case 3:
      var value = /** @type {!proto.WebcacheOrderByEnum} */ (reader.readEnum());
      msg.setOrderBy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheDomainsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheDomainsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheDomainsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDomainsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDateFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WebcacheDateFilter.serializeBinaryToWriter
    );
  }
  f = message.getOrderBy();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheDomainsRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheDomainsRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional WebcacheDateFilter date_filter = 2;
 * @return {?proto.WebcacheDateFilter}
 */
proto.WebcacheDomainsRequest.prototype.getDateFilter = function() {
  return /** @type{?proto.WebcacheDateFilter} */ (
    jspb.Message.getWrapperField(this, proto.WebcacheDateFilter, 2));
};


/** @param {?proto.WebcacheDateFilter|undefined} value */
proto.WebcacheDomainsRequest.prototype.setDateFilter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheDomainsRequest.prototype.clearDateFilter = function() {
  this.setDateFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheDomainsRequest.prototype.hasDateFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WebcacheOrderByEnum order_by = 3;
 * @return {!proto.WebcacheOrderByEnum}
 */
proto.WebcacheDomainsRequest.prototype.getOrderBy = function() {
  return /** @type {!proto.WebcacheOrderByEnum} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.WebcacheOrderByEnum} value */
proto.WebcacheDomainsRequest.prototype.setOrderBy = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheDomains = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WebcacheDomains.repeatedFields_, null);
};
goog.inherits(proto.WebcacheDomains, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheDomains.displayName = 'proto.WebcacheDomains';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WebcacheDomains.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheDomains.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheDomains.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheDomains} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDomains.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    domainList: jspb.Message.toObjectList(msg.getDomainList(),
    proto.WebcacheDomain.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheDomains}
 */
proto.WebcacheDomains.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheDomains;
  return proto.WebcacheDomains.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheDomains} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheDomains}
 */
proto.WebcacheDomains.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.WebcacheDomain;
      reader.readMessage(value,proto.WebcacheDomain.deserializeBinaryFromReader);
      msg.addDomain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheDomains.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheDomains.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheDomains} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDomains.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getDomainList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.WebcacheDomain.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheDomains.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheDomains.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.WebcacheDomains.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.WebcacheDomains.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheDomains.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheDomains.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated WebcacheDomain domain = 3;
 * @return {!Array<!proto.WebcacheDomain>}
 */
proto.WebcacheDomains.prototype.getDomainList = function() {
  return /** @type{!Array<!proto.WebcacheDomain>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WebcacheDomain, 3));
};


/** @param {!Array<!proto.WebcacheDomain>} value */
proto.WebcacheDomains.prototype.setDomainList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.WebcacheDomain=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WebcacheDomain}
 */
proto.WebcacheDomains.prototype.addDomain = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.WebcacheDomain, opt_index);
};


proto.WebcacheDomains.prototype.clearDomainList = function() {
  this.setDomainList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheDomain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WebcacheDomain.repeatedFields_, null);
};
goog.inherits(proto.WebcacheDomain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheDomain.displayName = 'proto.WebcacheDomain';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WebcacheDomain.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheDomain.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheDomain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheDomain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDomain.toObject = function(includeInstance, msg) {
  var f, obj = {
    domain: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requests: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 4, 0),
    userList: jspb.Message.toObjectList(msg.getUserList(),
    proto.WebcacheDomainUser.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheDomain}
 */
proto.WebcacheDomain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheDomain;
  return proto.WebcacheDomain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheDomain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheDomain}
 */
proto.WebcacheDomain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequests(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDuration(value);
      break;
    case 5:
      var value = new proto.WebcacheDomainUser;
      reader.readMessage(value,proto.WebcacheDomainUser.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheDomain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheDomain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheDomain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDomain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequests();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBytes();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.WebcacheDomainUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional string domain = 1;
 * @return {string}
 */
proto.WebcacheDomain.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WebcacheDomain.prototype.setDomain = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 requests = 2;
 * @return {number}
 */
proto.WebcacheDomain.prototype.getRequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WebcacheDomain.prototype.setRequests = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 bytes = 3;
 * @return {number}
 */
proto.WebcacheDomain.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WebcacheDomain.prototype.setBytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 duration = 4;
 * @return {number}
 */
proto.WebcacheDomain.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.WebcacheDomain.prototype.setDuration = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated WebcacheDomainUser user = 5;
 * @return {!Array<!proto.WebcacheDomainUser>}
 */
proto.WebcacheDomain.prototype.getUserList = function() {
  return /** @type{!Array<!proto.WebcacheDomainUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WebcacheDomainUser, 5));
};


/** @param {!Array<!proto.WebcacheDomainUser>} value */
proto.WebcacheDomain.prototype.setUserList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.WebcacheDomainUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WebcacheDomainUser}
 */
proto.WebcacheDomain.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.WebcacheDomainUser, opt_index);
};


proto.WebcacheDomain.prototype.clearUserList = function() {
  this.setUserList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheDomainUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheDomainUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheDomainUser.displayName = 'proto.WebcacheDomainUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheDomainUser.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheDomainUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheDomainUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDomainUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requests: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bytes: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheDomainUser}
 */
proto.WebcacheDomainUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheDomainUser;
  return proto.WebcacheDomainUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheDomainUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheDomainUser}
 */
proto.WebcacheDomainUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequests(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheDomainUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheDomainUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheDomainUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDomainUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequests();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBytes();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string user = 1;
 * @return {string}
 */
proto.WebcacheDomainUser.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WebcacheDomainUser.prototype.setUser = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 requests = 2;
 * @return {number}
 */
proto.WebcacheDomainUser.prototype.getRequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WebcacheDomainUser.prototype.setRequests = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 bytes = 3;
 * @return {number}
 */
proto.WebcacheDomainUser.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WebcacheDomainUser.prototype.setBytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheTotalsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheTotalsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheTotalsRequest.displayName = 'proto.WebcacheTotalsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheTotalsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheTotalsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheTotalsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheTotalsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dateFilter: (f = msg.getDateFilter()) && proto.WebcacheDateFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheTotalsRequest}
 */
proto.WebcacheTotalsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheTotalsRequest;
  return proto.WebcacheTotalsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheTotalsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheTotalsRequest}
 */
proto.WebcacheTotalsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.WebcacheDateFilter;
      reader.readMessage(value,proto.WebcacheDateFilter.deserializeBinaryFromReader);
      msg.setDateFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheTotalsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheTotalsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheTotalsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheTotalsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDateFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.WebcacheDateFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheTotalsRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheTotalsRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional WebcacheDateFilter date_filter = 2;
 * @return {?proto.WebcacheDateFilter}
 */
proto.WebcacheTotalsRequest.prototype.getDateFilter = function() {
  return /** @type{?proto.WebcacheDateFilter} */ (
    jspb.Message.getWrapperField(this, proto.WebcacheDateFilter, 2));
};


/** @param {?proto.WebcacheDateFilter|undefined} value */
proto.WebcacheTotalsRequest.prototype.setDateFilter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheTotalsRequest.prototype.clearDateFilter = function() {
  this.setDateFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheTotalsRequest.prototype.hasDateFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheTotals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WebcacheTotals.repeatedFields_, null);
};
goog.inherits(proto.WebcacheTotals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheTotals.displayName = 'proto.WebcacheTotals';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WebcacheTotals.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheTotals.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheTotals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheTotals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheTotals.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    hits: jspb.Message.getFieldWithDefault(msg, 3, 0),
    misses: jspb.Message.getFieldWithDefault(msg, 4, 0),
    denied: jspb.Message.getFieldWithDefault(msg, 5, 0),
    hitsBytes: jspb.Message.getFieldWithDefault(msg, 6, 0),
    missesBytes: jspb.Message.getFieldWithDefault(msg, 7, 0),
    deniedBytes: jspb.Message.getFieldWithDefault(msg, 8, 0),
    users: jspb.Message.getFieldWithDefault(msg, 9, 0),
    sites: jspb.Message.getFieldWithDefault(msg, 10, 0),
    domains: jspb.Message.getFieldWithDefault(msg, 11, 0),
    periodList: jspb.Message.toObjectList(msg.getPeriodList(),
    proto.WebcacheTotalsPeriod.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheTotals}
 */
proto.WebcacheTotals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheTotals;
  return proto.WebcacheTotals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheTotals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheTotals}
 */
proto.WebcacheTotals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHits(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMisses(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDenied(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHitsBytes(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMissesBytes(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDeniedBytes(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUsers(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSites(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDomains(value);
      break;
    case 12:
      var value = new proto.WebcacheTotalsPeriod;
      reader.readMessage(value,proto.WebcacheTotalsPeriod.deserializeBinaryFromReader);
      msg.addPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheTotals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheTotals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheTotals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheTotals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getHits();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMisses();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getDenied();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getHitsBytes();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMissesBytes();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getDeniedBytes();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getUsers();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getSites();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getDomains();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getPeriodList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.WebcacheTotalsPeriod.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheTotals.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheTotals.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.WebcacheTotals.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.WebcacheTotals.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheTotals.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheTotals.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 hits = 3;
 * @return {number}
 */
proto.WebcacheTotals.prototype.getHits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WebcacheTotals.prototype.setHits = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 misses = 4;
 * @return {number}
 */
proto.WebcacheTotals.prototype.getMisses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.WebcacheTotals.prototype.setMisses = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 denied = 5;
 * @return {number}
 */
proto.WebcacheTotals.prototype.getDenied = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.WebcacheTotals.prototype.setDenied = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 hits_bytes = 6;
 * @return {number}
 */
proto.WebcacheTotals.prototype.getHitsBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.WebcacheTotals.prototype.setHitsBytes = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 misses_bytes = 7;
 * @return {number}
 */
proto.WebcacheTotals.prototype.getMissesBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.WebcacheTotals.prototype.setMissesBytes = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 denied_bytes = 8;
 * @return {number}
 */
proto.WebcacheTotals.prototype.getDeniedBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.WebcacheTotals.prototype.setDeniedBytes = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 users = 9;
 * @return {number}
 */
proto.WebcacheTotals.prototype.getUsers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.WebcacheTotals.prototype.setUsers = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 sites = 10;
 * @return {number}
 */
proto.WebcacheTotals.prototype.getSites = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.WebcacheTotals.prototype.setSites = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 domains = 11;
 * @return {number}
 */
proto.WebcacheTotals.prototype.getDomains = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.WebcacheTotals.prototype.setDomains = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * repeated WebcacheTotalsPeriod period = 12;
 * @return {!Array<!proto.WebcacheTotalsPeriod>}
 */
proto.WebcacheTotals.prototype.getPeriodList = function() {
  return /** @type{!Array<!proto.WebcacheTotalsPeriod>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WebcacheTotalsPeriod, 12));
};


/** @param {!Array<!proto.WebcacheTotalsPeriod>} value */
proto.WebcacheTotals.prototype.setPeriodList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.WebcacheTotalsPeriod=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WebcacheTotalsPeriod}
 */
proto.WebcacheTotals.prototype.addPeriod = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.WebcacheTotalsPeriod, opt_index);
};


proto.WebcacheTotals.prototype.clearPeriodList = function() {
  this.setPeriodList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheTotalsPeriod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheTotalsPeriod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheTotalsPeriod.displayName = 'proto.WebcacheTotalsPeriod';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheTotalsPeriod.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheTotalsPeriod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheTotalsPeriod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheTotalsPeriod.toObject = function(includeInstance, msg) {
  var f, obj = {
    period: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hits: jspb.Message.getFieldWithDefault(msg, 2, 0),
    misses: jspb.Message.getFieldWithDefault(msg, 3, 0),
    denied: jspb.Message.getFieldWithDefault(msg, 4, 0),
    hitsBytes: jspb.Message.getFieldWithDefault(msg, 5, 0),
    missesBytes: jspb.Message.getFieldWithDefault(msg, 6, 0),
    deniedBytes: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheTotalsPeriod}
 */
proto.WebcacheTotalsPeriod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheTotalsPeriod;
  return proto.WebcacheTotalsPeriod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheTotalsPeriod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheTotalsPeriod}
 */
proto.WebcacheTotalsPeriod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPeriod(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHits(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMisses(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDenied(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHitsBytes(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMissesBytes(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDeniedBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheTotalsPeriod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheTotalsPeriod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheTotalsPeriod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheTotalsPeriod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeriod();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHits();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMisses();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDenied();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getHitsBytes();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMissesBytes();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getDeniedBytes();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional uint32 period = 1;
 * @return {number}
 */
proto.WebcacheTotalsPeriod.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheTotalsPeriod.prototype.setPeriod = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 hits = 2;
 * @return {number}
 */
proto.WebcacheTotalsPeriod.prototype.getHits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WebcacheTotalsPeriod.prototype.setHits = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 misses = 3;
 * @return {number}
 */
proto.WebcacheTotalsPeriod.prototype.getMisses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.WebcacheTotalsPeriod.prototype.setMisses = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 denied = 4;
 * @return {number}
 */
proto.WebcacheTotalsPeriod.prototype.getDenied = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.WebcacheTotalsPeriod.prototype.setDenied = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 hits_bytes = 5;
 * @return {number}
 */
proto.WebcacheTotalsPeriod.prototype.getHitsBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.WebcacheTotalsPeriod.prototype.setHitsBytes = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 misses_bytes = 6;
 * @return {number}
 */
proto.WebcacheTotalsPeriod.prototype.getMissesBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.WebcacheTotalsPeriod.prototype.setMissesBytes = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 denied_bytes = 7;
 * @return {number}
 */
proto.WebcacheTotalsPeriod.prototype.getDeniedBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.WebcacheTotalsPeriod.prototype.setDeniedBytes = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheDatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebcacheDatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheDatesRequest.displayName = 'proto.WebcacheDatesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheDatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheDatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheDatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDatesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheDatesRequest}
 */
proto.WebcacheDatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheDatesRequest;
  return proto.WebcacheDatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheDatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheDatesRequest}
 */
proto.WebcacheDatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheDatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheDatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheDatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheDatesRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheDatesRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheDates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WebcacheDates.repeatedFields_, null);
};
goog.inherits(proto.WebcacheDates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheDates.displayName = 'proto.WebcacheDates';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WebcacheDates.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheDates.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheDates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheDates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDates.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    yearList: jspb.Message.toObjectList(msg.getYearList(),
    proto.WebcacheYear.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheDates}
 */
proto.WebcacheDates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheDates;
  return proto.WebcacheDates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheDates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheDates}
 */
proto.WebcacheDates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.WebcacheYear;
      reader.readMessage(value,proto.WebcacheYear.deserializeBinaryFromReader);
      msg.addYear(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheDates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheDates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheDates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheDates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getYearList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.WebcacheYear.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.WebcacheDates.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheDates.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.WebcacheDates.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.WebcacheDates.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WebcacheDates.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WebcacheDates.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated WebcacheYear year = 3;
 * @return {!Array<!proto.WebcacheYear>}
 */
proto.WebcacheDates.prototype.getYearList = function() {
  return /** @type{!Array<!proto.WebcacheYear>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WebcacheYear, 3));
};


/** @param {!Array<!proto.WebcacheYear>} value */
proto.WebcacheDates.prototype.setYearList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.WebcacheYear=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WebcacheYear}
 */
proto.WebcacheDates.prototype.addYear = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.WebcacheYear, opt_index);
};


proto.WebcacheDates.prototype.clearYearList = function() {
  this.setYearList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheYear = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WebcacheYear.repeatedFields_, null);
};
goog.inherits(proto.WebcacheYear, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheYear.displayName = 'proto.WebcacheYear';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WebcacheYear.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheYear.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheYear.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheYear} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheYear.toObject = function(includeInstance, msg) {
  var f, obj = {
    year: jspb.Message.getFieldWithDefault(msg, 1, 0),
    monthList: jspb.Message.toObjectList(msg.getMonthList(),
    proto.WebcacheMonth.toObject, includeInstance),
    weekList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheYear}
 */
proto.WebcacheYear.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheYear;
  return proto.WebcacheYear.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheYear} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheYear}
 */
proto.WebcacheYear.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setYear(value);
      break;
    case 2:
      var value = new proto.WebcacheMonth;
      reader.readMessage(value,proto.WebcacheMonth.deserializeBinaryFromReader);
      msg.addMonth(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setWeekList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheYear.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheYear.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheYear} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheYear.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYear();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMonthList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.WebcacheMonth.serializeBinaryToWriter
    );
  }
  f = message.getWeekList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 year = 1;
 * @return {number}
 */
proto.WebcacheYear.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.WebcacheYear.prototype.setYear = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated WebcacheMonth month = 2;
 * @return {!Array<!proto.WebcacheMonth>}
 */
proto.WebcacheYear.prototype.getMonthList = function() {
  return /** @type{!Array<!proto.WebcacheMonth>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.WebcacheMonth, 2));
};


/** @param {!Array<!proto.WebcacheMonth>} value */
proto.WebcacheYear.prototype.setMonthList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.WebcacheMonth=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WebcacheMonth}
 */
proto.WebcacheYear.prototype.addMonth = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.WebcacheMonth, opt_index);
};


proto.WebcacheYear.prototype.clearMonthList = function() {
  this.setMonthList([]);
};


/**
 * repeated uint32 week = 3;
 * @return {!Array<number>}
 */
proto.WebcacheYear.prototype.getWeekList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.WebcacheYear.prototype.setWeekList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.WebcacheYear.prototype.addWeek = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.WebcacheYear.prototype.clearWeekList = function() {
  this.setWeekList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebcacheMonth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.WebcacheMonth.repeatedFields_, null);
};
goog.inherits(proto.WebcacheMonth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebcacheMonth.displayName = 'proto.WebcacheMonth';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.WebcacheMonth.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebcacheMonth.prototype.toObject = function(opt_includeInstance) {
  return proto.WebcacheMonth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebcacheMonth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheMonth.toObject = function(includeInstance, msg) {
  var f, obj = {
    month: jspb.Message.getFieldWithDefault(msg, 1, ""),
    val: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dayList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebcacheMonth}
 */
proto.WebcacheMonth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebcacheMonth;
  return proto.WebcacheMonth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebcacheMonth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebcacheMonth}
 */
proto.WebcacheMonth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMonth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVal(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setDayList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebcacheMonth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebcacheMonth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebcacheMonth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebcacheMonth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonth();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVal();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDayList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
};


/**
 * optional string month = 1;
 * @return {string}
 */
proto.WebcacheMonth.prototype.getMonth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WebcacheMonth.prototype.setMonth = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 val = 2;
 * @return {number}
 */
proto.WebcacheMonth.prototype.getVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WebcacheMonth.prototype.setVal = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated uint32 day = 3;
 * @return {!Array<number>}
 */
proto.WebcacheMonth.prototype.getDayList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<number>} value */
proto.WebcacheMonth.prototype.setDayList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.WebcacheMonth.prototype.addDay = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.WebcacheMonth.prototype.clearDayList = function() {
  this.setDayList([]);
};


/**
 * @enum {number}
 */
proto.WebcacheOrderByEnum = {
  BYTES: 0,
  REQUESTS: 1,
  DURATION: 2,
  USERS: 3,
  LARGEST: 4
};

goog.object.extend(exports, proto);
