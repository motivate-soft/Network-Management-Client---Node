/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var error_pb = require('./error_pb.js');
goog.object.extend(proto, error_pb);
var report_pb = require('./report_pb.js');
goog.object.extend(proto, report_pb);
goog.exportSymbol('proto.NetworkApplication', null, global);
goog.exportSymbol('proto.NetworkApplications', null, global);
goog.exportSymbol('proto.NetworkApplicationsRequest', null, global);
goog.exportSymbol('proto.NetworkDirectionEnum', null, global);
goog.exportSymbol('proto.NetworkInterface', null, global);
goog.exportSymbol('proto.NetworkInterfaceStats', null, global);
goog.exportSymbol('proto.NetworkInterfaceTraffic', null, global);
goog.exportSymbol('proto.NetworkInterfaceTrafficRequest', null, global);
goog.exportSymbol('proto.NetworkInterfaces', null, global);
goog.exportSymbol('proto.NetworkInterfacesRequest', null, global);
goog.exportSymbol('proto.NetworkOptimizationLanToWan', null, global);
goog.exportSymbol('proto.NetworkOptimizationLanToWanRequest', null, global);
goog.exportSymbol('proto.NetworkOptimizationPassThrough', null, global);
goog.exportSymbol('proto.NetworkOptimizationPassThroughRequest', null, global);
goog.exportSymbol('proto.NetworkOptimizationRatios', null, global);
goog.exportSymbol('proto.NetworkOptimizationRatiosRequest', null, global);
goog.exportSymbol('proto.NetworkOptimizationWanToLan', null, global);
goog.exportSymbol('proto.NetworkOptimizationWanToLanRequest', null, global);
goog.exportSymbol('proto.NetworkOrderByEnum', null, global);
goog.exportSymbol('proto.NetworkPeer', null, global);
goog.exportSymbol('proto.NetworkPeerDelete', null, global);
goog.exportSymbol('proto.NetworkPeerDeleteRequest', null, global);
goog.exportSymbol('proto.NetworkPeers', null, global);
goog.exportSymbol('proto.NetworkPeersRequest', null, global);
goog.exportSymbol('proto.NetworkQosClassNumber', null, global);
goog.exportSymbol('proto.NetworkQosReport', null, global);
goog.exportSymbol('proto.NetworkQosReportRequest', null, global);
goog.exportSymbol('proto.NetworkSession', null, global);
goog.exportSymbol('proto.NetworkSessionDetail', null, global);
goog.exportSymbol('proto.NetworkSessionDetailFilter', null, global);
goog.exportSymbol('proto.NetworkSessionDetailRequest', null, global);
goog.exportSymbol('proto.NetworkSessions', null, global);
goog.exportSymbol('proto.NetworkSessionsFilter', null, global);
goog.exportSymbol('proto.NetworkSessionsRequest', null, global);
goog.exportSymbol('proto.NetworkSortDirectionEnum', null, global);
goog.exportSymbol('proto.NetworkTopApplication', null, global);
goog.exportSymbol('proto.NetworkTopApplications', null, global);
goog.exportSymbol('proto.NetworkTopApplicationsFilter', null, global);
goog.exportSymbol('proto.NetworkTopApplicationsRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkInterfaceStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkInterfaceStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkInterfaceStats.displayName = 'proto.NetworkInterfaceStats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkInterfaceStats.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkInterfaceStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkInterfaceStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkInterfaceStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errors: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dropped: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkInterfaceStats}
 */
proto.NetworkInterfaceStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkInterfaceStats;
  return proto.NetworkInterfaceStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkInterfaceStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkInterfaceStats}
 */
proto.NetworkInterfaceStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setErrors(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDropped(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkInterfaceStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkInterfaceStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkInterfaceStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkInterfaceStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytes();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getErrors();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDropped();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint64 bytes = 1;
 * @return {number}
 */
proto.NetworkInterfaceStats.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkInterfaceStats.prototype.setBytes = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 errors = 2;
 * @return {number}
 */
proto.NetworkInterfaceStats.prototype.getErrors = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.NetworkInterfaceStats.prototype.setErrors = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 dropped = 3;
 * @return {number}
 */
proto.NetworkInterfaceStats.prototype.getDropped = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.NetworkInterfaceStats.prototype.setDropped = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkInterface = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkInterface, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkInterface.displayName = 'proto.NetworkInterface';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkInterface.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkInterface.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkInterface} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkInterface.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    online: jspb.Message.getFieldWithDefault(msg, 2, false),
    mac: jspb.Message.getFieldWithDefault(msg, 3, ""),
    driver: jspb.Message.getFieldWithDefault(msg, 4, ""),
    duplex: jspb.Message.getFieldWithDefault(msg, 5, ""),
    speed: jspb.Message.getFieldWithDefault(msg, 6, 0),
    mtu: jspb.Message.getFieldWithDefault(msg, 7, 0),
    receive: (f = msg.getReceive()) && proto.NetworkInterfaceStats.toObject(includeInstance, f),
    transmit: (f = msg.getTransmit()) && proto.NetworkInterfaceStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkInterface}
 */
proto.NetworkInterface.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkInterface;
  return proto.NetworkInterface.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkInterface} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkInterface}
 */
proto.NetworkInterface.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMac(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriver(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuplex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMtu(value);
      break;
    case 8:
      var value = new proto.NetworkInterfaceStats;
      reader.readMessage(value,proto.NetworkInterfaceStats.deserializeBinaryFromReader);
      msg.setReceive(value);
      break;
    case 9:
      var value = new proto.NetworkInterfaceStats;
      reader.readMessage(value,proto.NetworkInterfaceStats.deserializeBinaryFromReader);
      msg.setTransmit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkInterface.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkInterface.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkInterface} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkInterface.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMac();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDriver();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDuplex();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getMtu();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getReceive();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.NetworkInterfaceStats.serializeBinaryToWriter
    );
  }
  f = message.getTransmit();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.NetworkInterfaceStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.NetworkInterface.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NetworkInterface.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool online = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.NetworkInterface.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.NetworkInterface.prototype.setOnline = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string mac = 3;
 * @return {string}
 */
proto.NetworkInterface.prototype.getMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.NetworkInterface.prototype.setMac = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string driver = 4;
 * @return {string}
 */
proto.NetworkInterface.prototype.getDriver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.NetworkInterface.prototype.setDriver = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string duplex = 5;
 * @return {string}
 */
proto.NetworkInterface.prototype.getDuplex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.NetworkInterface.prototype.setDuplex = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 speed = 6;
 * @return {number}
 */
proto.NetworkInterface.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.NetworkInterface.prototype.setSpeed = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 mtu = 7;
 * @return {number}
 */
proto.NetworkInterface.prototype.getMtu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.NetworkInterface.prototype.setMtu = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional NetworkInterfaceStats receive = 8;
 * @return {?proto.NetworkInterfaceStats}
 */
proto.NetworkInterface.prototype.getReceive = function() {
  return /** @type{?proto.NetworkInterfaceStats} */ (
    jspb.Message.getWrapperField(this, proto.NetworkInterfaceStats, 8));
};


/** @param {?proto.NetworkInterfaceStats|undefined} value */
proto.NetworkInterface.prototype.setReceive = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.NetworkInterface.prototype.clearReceive = function() {
  this.setReceive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkInterface.prototype.hasReceive = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional NetworkInterfaceStats transmit = 9;
 * @return {?proto.NetworkInterfaceStats}
 */
proto.NetworkInterface.prototype.getTransmit = function() {
  return /** @type{?proto.NetworkInterfaceStats} */ (
    jspb.Message.getWrapperField(this, proto.NetworkInterfaceStats, 9));
};


/** @param {?proto.NetworkInterfaceStats|undefined} value */
proto.NetworkInterface.prototype.setTransmit = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.NetworkInterface.prototype.clearTransmit = function() {
  this.setTransmit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkInterface.prototype.hasTransmit = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkInterfacesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkInterfacesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkInterfacesRequest.displayName = 'proto.NetworkInterfacesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkInterfacesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkInterfacesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkInterfacesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkInterfacesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkInterfacesRequest}
 */
proto.NetworkInterfacesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkInterfacesRequest;
  return proto.NetworkInterfacesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkInterfacesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkInterfacesRequest}
 */
proto.NetworkInterfacesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkInterfacesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkInterfacesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkInterfacesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkInterfacesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkInterfacesRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkInterfacesRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkInterfaces = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NetworkInterfaces.repeatedFields_, null);
};
goog.inherits(proto.NetworkInterfaces, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkInterfaces.displayName = 'proto.NetworkInterfaces';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NetworkInterfaces.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkInterfaces.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkInterfaces.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkInterfaces} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkInterfaces.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    networkInterfaceList: jspb.Message.toObjectList(msg.getNetworkInterfaceList(),
    proto.NetworkInterface.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkInterfaces}
 */
proto.NetworkInterfaces.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkInterfaces;
  return proto.NetworkInterfaces.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkInterfaces} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkInterfaces}
 */
proto.NetworkInterfaces.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.NetworkInterface;
      reader.readMessage(value,proto.NetworkInterface.deserializeBinaryFromReader);
      msg.addNetworkInterface(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkInterfaces.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkInterfaces.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkInterfaces} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkInterfaces.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getNetworkInterfaceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.NetworkInterface.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkInterfaces.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkInterfaces.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.NetworkInterfaces.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.NetworkInterfaces.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkInterfaces.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkInterfaces.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated NetworkInterface network_interface = 3;
 * @return {!Array<!proto.NetworkInterface>}
 */
proto.NetworkInterfaces.prototype.getNetworkInterfaceList = function() {
  return /** @type{!Array<!proto.NetworkInterface>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NetworkInterface, 3));
};


/** @param {!Array<!proto.NetworkInterface>} value */
proto.NetworkInterfaces.prototype.setNetworkInterfaceList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.NetworkInterface=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NetworkInterface}
 */
proto.NetworkInterfaces.prototype.addNetworkInterface = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.NetworkInterface, opt_index);
};


proto.NetworkInterfaces.prototype.clearNetworkInterfaceList = function() {
  this.setNetworkInterfaceList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkQosClassNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkQosClassNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkQosClassNumber.displayName = 'proto.NetworkQosClassNumber';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkQosClassNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkQosClassNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkQosClassNumber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkQosClassNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkQosClassNumber}
 */
proto.NetworkQosClassNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkQosClassNumber;
  return proto.NetworkQosClassNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkQosClassNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkQosClassNumber}
 */
proto.NetworkQosClassNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkQosClassNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkQosClassNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkQosClassNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkQosClassNumber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 value = 1;
 * @return {number}
 */
proto.NetworkQosClassNumber.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkQosClassNumber.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkQosReportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkQosReportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkQosReportRequest.displayName = 'proto.NetworkQosReportRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkQosReportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkQosReportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkQosReportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkQosReportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    period: jspb.Message.getFieldWithDefault(msg, 2, 0),
    qosClass: (f = msg.getQosClass()) && proto.NetworkQosClassNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkQosReportRequest}
 */
proto.NetworkQosReportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkQosReportRequest;
  return proto.NetworkQosReportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkQosReportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkQosReportRequest}
 */
proto.NetworkQosReportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {!proto.ReportPeriod} */ (reader.readEnum());
      msg.setPeriod(value);
      break;
    case 3:
      var value = new proto.NetworkQosClassNumber;
      reader.readMessage(value,proto.NetworkQosClassNumber.deserializeBinaryFromReader);
      msg.setQosClass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkQosReportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkQosReportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkQosReportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkQosReportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getQosClass();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.NetworkQosClassNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkQosReportRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkQosReportRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ReportPeriod period = 2;
 * @return {!proto.ReportPeriod}
 */
proto.NetworkQosReportRequest.prototype.getPeriod = function() {
  return /** @type {!proto.ReportPeriod} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ReportPeriod} value */
proto.NetworkQosReportRequest.prototype.setPeriod = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional NetworkQosClassNumber qos_class = 3;
 * @return {?proto.NetworkQosClassNumber}
 */
proto.NetworkQosReportRequest.prototype.getQosClass = function() {
  return /** @type{?proto.NetworkQosClassNumber} */ (
    jspb.Message.getWrapperField(this, proto.NetworkQosClassNumber, 3));
};


/** @param {?proto.NetworkQosClassNumber|undefined} value */
proto.NetworkQosReportRequest.prototype.setQosClass = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.NetworkQosReportRequest.prototype.clearQosClass = function() {
  this.setQosClass(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkQosReportRequest.prototype.hasQosClass = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkQosReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NetworkQosReport.repeatedFields_, null);
};
goog.inherits(proto.NetworkQosReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkQosReport.displayName = 'proto.NetworkQosReport';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NetworkQosReport.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkQosReport.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkQosReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkQosReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkQosReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    reportList: jspb.Message.toObjectList(msg.getReportList(),
    report_pb.Report.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkQosReport}
 */
proto.NetworkQosReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkQosReport;
  return proto.NetworkQosReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkQosReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkQosReport}
 */
proto.NetworkQosReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new report_pb.Report;
      reader.readMessage(value,report_pb.Report.deserializeBinaryFromReader);
      msg.addReport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkQosReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkQosReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkQosReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkQosReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getReportList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      report_pb.Report.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkQosReport.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkQosReport.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.NetworkQosReport.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.NetworkQosReport.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkQosReport.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkQosReport.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Report report = 3;
 * @return {!Array<!proto.Report>}
 */
proto.NetworkQosReport.prototype.getReportList = function() {
  return /** @type{!Array<!proto.Report>} */ (
    jspb.Message.getRepeatedWrapperField(this, report_pb.Report, 3));
};


/** @param {!Array<!proto.Report>} value */
proto.NetworkQosReport.prototype.setReportList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Report=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Report}
 */
proto.NetworkQosReport.prototype.addReport = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Report, opt_index);
};


proto.NetworkQosReport.prototype.clearReportList = function() {
  this.setReportList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkOptimizationRatiosRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkOptimizationRatiosRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkOptimizationRatiosRequest.displayName = 'proto.NetworkOptimizationRatiosRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkOptimizationRatiosRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkOptimizationRatiosRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkOptimizationRatiosRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationRatiosRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    period: jspb.Message.getFieldWithDefault(msg, 2, 0),
    peerIp: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkOptimizationRatiosRequest}
 */
proto.NetworkOptimizationRatiosRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkOptimizationRatiosRequest;
  return proto.NetworkOptimizationRatiosRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkOptimizationRatiosRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkOptimizationRatiosRequest}
 */
proto.NetworkOptimizationRatiosRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {!proto.ReportPeriod} */ (reader.readEnum());
      msg.setPeriod(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerIp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkOptimizationRatiosRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkOptimizationRatiosRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkOptimizationRatiosRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationRatiosRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPeerIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkOptimizationRatiosRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkOptimizationRatiosRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ReportPeriod period = 2;
 * @return {!proto.ReportPeriod}
 */
proto.NetworkOptimizationRatiosRequest.prototype.getPeriod = function() {
  return /** @type {!proto.ReportPeriod} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ReportPeriod} value */
proto.NetworkOptimizationRatiosRequest.prototype.setPeriod = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string peer_ip = 3;
 * @return {string}
 */
proto.NetworkOptimizationRatiosRequest.prototype.getPeerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.NetworkOptimizationRatiosRequest.prototype.setPeerIp = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkOptimizationRatios = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkOptimizationRatios, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkOptimizationRatios.displayName = 'proto.NetworkOptimizationRatios';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkOptimizationRatios.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkOptimizationRatios.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkOptimizationRatios} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationRatios.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    report: (f = msg.getReport()) && report_pb.Report.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkOptimizationRatios}
 */
proto.NetworkOptimizationRatios.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkOptimizationRatios;
  return proto.NetworkOptimizationRatios.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkOptimizationRatios} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkOptimizationRatios}
 */
proto.NetworkOptimizationRatios.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new report_pb.Report;
      reader.readMessage(value,report_pb.Report.deserializeBinaryFromReader);
      msg.setReport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkOptimizationRatios.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkOptimizationRatios.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkOptimizationRatios} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationRatios.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getReport();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      report_pb.Report.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkOptimizationRatios.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkOptimizationRatios.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.NetworkOptimizationRatios.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.NetworkOptimizationRatios.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkOptimizationRatios.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkOptimizationRatios.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Report report = 3;
 * @return {?proto.Report}
 */
proto.NetworkOptimizationRatios.prototype.getReport = function() {
  return /** @type{?proto.Report} */ (
    jspb.Message.getWrapperField(this, report_pb.Report, 3));
};


/** @param {?proto.Report|undefined} value */
proto.NetworkOptimizationRatios.prototype.setReport = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.NetworkOptimizationRatios.prototype.clearReport = function() {
  this.setReport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkOptimizationRatios.prototype.hasReport = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkOptimizationPassThroughRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkOptimizationPassThroughRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkOptimizationPassThroughRequest.displayName = 'proto.NetworkOptimizationPassThroughRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkOptimizationPassThroughRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkOptimizationPassThroughRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkOptimizationPassThroughRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationPassThroughRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    period: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkOptimizationPassThroughRequest}
 */
proto.NetworkOptimizationPassThroughRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkOptimizationPassThroughRequest;
  return proto.NetworkOptimizationPassThroughRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkOptimizationPassThroughRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkOptimizationPassThroughRequest}
 */
proto.NetworkOptimizationPassThroughRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {!proto.ReportPeriod} */ (reader.readEnum());
      msg.setPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkOptimizationPassThroughRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkOptimizationPassThroughRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkOptimizationPassThroughRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationPassThroughRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkOptimizationPassThroughRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkOptimizationPassThroughRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ReportPeriod period = 2;
 * @return {!proto.ReportPeriod}
 */
proto.NetworkOptimizationPassThroughRequest.prototype.getPeriod = function() {
  return /** @type {!proto.ReportPeriod} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ReportPeriod} value */
proto.NetworkOptimizationPassThroughRequest.prototype.setPeriod = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkOptimizationPassThrough = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkOptimizationPassThrough, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkOptimizationPassThrough.displayName = 'proto.NetworkOptimizationPassThrough';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkOptimizationPassThrough.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkOptimizationPassThrough.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkOptimizationPassThrough} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationPassThrough.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    report: (f = msg.getReport()) && report_pb.Report.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkOptimizationPassThrough}
 */
proto.NetworkOptimizationPassThrough.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkOptimizationPassThrough;
  return proto.NetworkOptimizationPassThrough.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkOptimizationPassThrough} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkOptimizationPassThrough}
 */
proto.NetworkOptimizationPassThrough.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new report_pb.Report;
      reader.readMessage(value,report_pb.Report.deserializeBinaryFromReader);
      msg.setReport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkOptimizationPassThrough.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkOptimizationPassThrough.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkOptimizationPassThrough} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationPassThrough.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getReport();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      report_pb.Report.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkOptimizationPassThrough.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkOptimizationPassThrough.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.NetworkOptimizationPassThrough.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.NetworkOptimizationPassThrough.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkOptimizationPassThrough.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkOptimizationPassThrough.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Report report = 3;
 * @return {?proto.Report}
 */
proto.NetworkOptimizationPassThrough.prototype.getReport = function() {
  return /** @type{?proto.Report} */ (
    jspb.Message.getWrapperField(this, report_pb.Report, 3));
};


/** @param {?proto.Report|undefined} value */
proto.NetworkOptimizationPassThrough.prototype.setReport = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.NetworkOptimizationPassThrough.prototype.clearReport = function() {
  this.setReport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkOptimizationPassThrough.prototype.hasReport = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkOptimizationLanToWanRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkOptimizationLanToWanRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkOptimizationLanToWanRequest.displayName = 'proto.NetworkOptimizationLanToWanRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkOptimizationLanToWanRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkOptimizationLanToWanRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkOptimizationLanToWanRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationLanToWanRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    period: jspb.Message.getFieldWithDefault(msg, 2, 0),
    peerIp: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkOptimizationLanToWanRequest}
 */
proto.NetworkOptimizationLanToWanRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkOptimizationLanToWanRequest;
  return proto.NetworkOptimizationLanToWanRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkOptimizationLanToWanRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkOptimizationLanToWanRequest}
 */
proto.NetworkOptimizationLanToWanRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {!proto.ReportPeriod} */ (reader.readEnum());
      msg.setPeriod(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerIp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkOptimizationLanToWanRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkOptimizationLanToWanRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkOptimizationLanToWanRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationLanToWanRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPeerIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkOptimizationLanToWanRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkOptimizationLanToWanRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ReportPeriod period = 2;
 * @return {!proto.ReportPeriod}
 */
proto.NetworkOptimizationLanToWanRequest.prototype.getPeriod = function() {
  return /** @type {!proto.ReportPeriod} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ReportPeriod} value */
proto.NetworkOptimizationLanToWanRequest.prototype.setPeriod = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string peer_ip = 3;
 * @return {string}
 */
proto.NetworkOptimizationLanToWanRequest.prototype.getPeerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.NetworkOptimizationLanToWanRequest.prototype.setPeerIp = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkOptimizationLanToWan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkOptimizationLanToWan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkOptimizationLanToWan.displayName = 'proto.NetworkOptimizationLanToWan';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkOptimizationLanToWan.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkOptimizationLanToWan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkOptimizationLanToWan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationLanToWan.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    report: (f = msg.getReport()) && report_pb.Report.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkOptimizationLanToWan}
 */
proto.NetworkOptimizationLanToWan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkOptimizationLanToWan;
  return proto.NetworkOptimizationLanToWan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkOptimizationLanToWan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkOptimizationLanToWan}
 */
proto.NetworkOptimizationLanToWan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new report_pb.Report;
      reader.readMessage(value,report_pb.Report.deserializeBinaryFromReader);
      msg.setReport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkOptimizationLanToWan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkOptimizationLanToWan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkOptimizationLanToWan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationLanToWan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getReport();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      report_pb.Report.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkOptimizationLanToWan.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkOptimizationLanToWan.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.NetworkOptimizationLanToWan.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.NetworkOptimizationLanToWan.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkOptimizationLanToWan.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkOptimizationLanToWan.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Report report = 3;
 * @return {?proto.Report}
 */
proto.NetworkOptimizationLanToWan.prototype.getReport = function() {
  return /** @type{?proto.Report} */ (
    jspb.Message.getWrapperField(this, report_pb.Report, 3));
};


/** @param {?proto.Report|undefined} value */
proto.NetworkOptimizationLanToWan.prototype.setReport = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.NetworkOptimizationLanToWan.prototype.clearReport = function() {
  this.setReport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkOptimizationLanToWan.prototype.hasReport = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkOptimizationWanToLanRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkOptimizationWanToLanRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkOptimizationWanToLanRequest.displayName = 'proto.NetworkOptimizationWanToLanRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkOptimizationWanToLanRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkOptimizationWanToLanRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkOptimizationWanToLanRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationWanToLanRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    period: jspb.Message.getFieldWithDefault(msg, 2, 0),
    peerIp: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkOptimizationWanToLanRequest}
 */
proto.NetworkOptimizationWanToLanRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkOptimizationWanToLanRequest;
  return proto.NetworkOptimizationWanToLanRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkOptimizationWanToLanRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkOptimizationWanToLanRequest}
 */
proto.NetworkOptimizationWanToLanRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {!proto.ReportPeriod} */ (reader.readEnum());
      msg.setPeriod(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerIp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkOptimizationWanToLanRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkOptimizationWanToLanRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkOptimizationWanToLanRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationWanToLanRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPeerIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkOptimizationWanToLanRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkOptimizationWanToLanRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ReportPeriod period = 2;
 * @return {!proto.ReportPeriod}
 */
proto.NetworkOptimizationWanToLanRequest.prototype.getPeriod = function() {
  return /** @type {!proto.ReportPeriod} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ReportPeriod} value */
proto.NetworkOptimizationWanToLanRequest.prototype.setPeriod = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string peer_ip = 3;
 * @return {string}
 */
proto.NetworkOptimizationWanToLanRequest.prototype.getPeerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.NetworkOptimizationWanToLanRequest.prototype.setPeerIp = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkOptimizationWanToLan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkOptimizationWanToLan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkOptimizationWanToLan.displayName = 'proto.NetworkOptimizationWanToLan';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkOptimizationWanToLan.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkOptimizationWanToLan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkOptimizationWanToLan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationWanToLan.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    report: (f = msg.getReport()) && report_pb.Report.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkOptimizationWanToLan}
 */
proto.NetworkOptimizationWanToLan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkOptimizationWanToLan;
  return proto.NetworkOptimizationWanToLan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkOptimizationWanToLan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkOptimizationWanToLan}
 */
proto.NetworkOptimizationWanToLan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new report_pb.Report;
      reader.readMessage(value,report_pb.Report.deserializeBinaryFromReader);
      msg.setReport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkOptimizationWanToLan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkOptimizationWanToLan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkOptimizationWanToLan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkOptimizationWanToLan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getReport();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      report_pb.Report.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkOptimizationWanToLan.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkOptimizationWanToLan.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.NetworkOptimizationWanToLan.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.NetworkOptimizationWanToLan.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkOptimizationWanToLan.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkOptimizationWanToLan.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Report report = 3;
 * @return {?proto.Report}
 */
proto.NetworkOptimizationWanToLan.prototype.getReport = function() {
  return /** @type{?proto.Report} */ (
    jspb.Message.getWrapperField(this, report_pb.Report, 3));
};


/** @param {?proto.Report|undefined} value */
proto.NetworkOptimizationWanToLan.prototype.setReport = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.NetworkOptimizationWanToLan.prototype.clearReport = function() {
  this.setReport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkOptimizationWanToLan.prototype.hasReport = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkInterfaceTrafficRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkInterfaceTrafficRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkInterfaceTrafficRequest.displayName = 'proto.NetworkInterfaceTrafficRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkInterfaceTrafficRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkInterfaceTrafficRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkInterfaceTrafficRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkInterfaceTrafficRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    period: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkInterfaceTrafficRequest}
 */
proto.NetworkInterfaceTrafficRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkInterfaceTrafficRequest;
  return proto.NetworkInterfaceTrafficRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkInterfaceTrafficRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkInterfaceTrafficRequest}
 */
proto.NetworkInterfaceTrafficRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {!proto.ReportPeriod} */ (reader.readEnum());
      msg.setPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkInterfaceTrafficRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkInterfaceTrafficRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkInterfaceTrafficRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkInterfaceTrafficRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkInterfaceTrafficRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkInterfaceTrafficRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ReportPeriod period = 2;
 * @return {!proto.ReportPeriod}
 */
proto.NetworkInterfaceTrafficRequest.prototype.getPeriod = function() {
  return /** @type {!proto.ReportPeriod} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.ReportPeriod} value */
proto.NetworkInterfaceTrafficRequest.prototype.setPeriod = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkInterfaceTraffic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NetworkInterfaceTraffic.repeatedFields_, null);
};
goog.inherits(proto.NetworkInterfaceTraffic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkInterfaceTraffic.displayName = 'proto.NetworkInterfaceTraffic';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NetworkInterfaceTraffic.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkInterfaceTraffic.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkInterfaceTraffic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkInterfaceTraffic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkInterfaceTraffic.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    reportList: jspb.Message.toObjectList(msg.getReportList(),
    report_pb.Report.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkInterfaceTraffic}
 */
proto.NetworkInterfaceTraffic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkInterfaceTraffic;
  return proto.NetworkInterfaceTraffic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkInterfaceTraffic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkInterfaceTraffic}
 */
proto.NetworkInterfaceTraffic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new report_pb.Report;
      reader.readMessage(value,report_pb.Report.deserializeBinaryFromReader);
      msg.addReport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkInterfaceTraffic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkInterfaceTraffic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkInterfaceTraffic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkInterfaceTraffic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getReportList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      report_pb.Report.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkInterfaceTraffic.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkInterfaceTraffic.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.NetworkInterfaceTraffic.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.NetworkInterfaceTraffic.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkInterfaceTraffic.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkInterfaceTraffic.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Report report = 3;
 * @return {!Array<!proto.Report>}
 */
proto.NetworkInterfaceTraffic.prototype.getReportList = function() {
  return /** @type{!Array<!proto.Report>} */ (
    jspb.Message.getRepeatedWrapperField(this, report_pb.Report, 3));
};


/** @param {!Array<!proto.Report>} value */
proto.NetworkInterfaceTraffic.prototype.setReportList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Report=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Report}
 */
proto.NetworkInterfaceTraffic.prototype.addReport = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Report, opt_index);
};


proto.NetworkInterfaceTraffic.prototype.clearReportList = function() {
  this.setReportList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkPeerDeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkPeerDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkPeerDeleteRequest.displayName = 'proto.NetworkPeerDeleteRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkPeerDeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkPeerDeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkPeerDeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkPeerDeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    peerIp: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkPeerDeleteRequest}
 */
proto.NetworkPeerDeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkPeerDeleteRequest;
  return proto.NetworkPeerDeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkPeerDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkPeerDeleteRequest}
 */
proto.NetworkPeerDeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerIp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkPeerDeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkPeerDeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkPeerDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkPeerDeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPeerIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkPeerDeleteRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkPeerDeleteRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string peer_ip = 2;
 * @return {string}
 */
proto.NetworkPeerDeleteRequest.prototype.getPeerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.NetworkPeerDeleteRequest.prototype.setPeerIp = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkPeerDelete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkPeerDelete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkPeerDelete.displayName = 'proto.NetworkPeerDelete';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkPeerDelete.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkPeerDelete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkPeerDelete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkPeerDelete.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkPeerDelete}
 */
proto.NetworkPeerDelete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkPeerDelete;
  return proto.NetworkPeerDelete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkPeerDelete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkPeerDelete}
 */
proto.NetworkPeerDelete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkPeerDelete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkPeerDelete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkPeerDelete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkPeerDelete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkPeerDelete.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkPeerDelete.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.NetworkPeerDelete.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.NetworkPeerDelete.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkPeerDelete.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkPeerDelete.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkPeersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkPeersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkPeersRequest.displayName = 'proto.NetworkPeersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkPeersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkPeersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkPeersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkPeersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkPeersRequest}
 */
proto.NetworkPeersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkPeersRequest;
  return proto.NetworkPeersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkPeersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkPeersRequest}
 */
proto.NetworkPeersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkPeersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkPeersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkPeersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkPeersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkPeersRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkPeersRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkPeers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NetworkPeers.repeatedFields_, null);
};
goog.inherits(proto.NetworkPeers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkPeers.displayName = 'proto.NetworkPeers';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NetworkPeers.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkPeers.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkPeers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkPeers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkPeers.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    peerList: jspb.Message.toObjectList(msg.getPeerList(),
    proto.NetworkPeer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkPeers}
 */
proto.NetworkPeers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkPeers;
  return proto.NetworkPeers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkPeers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkPeers}
 */
proto.NetworkPeers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.NetworkPeer;
      reader.readMessage(value,proto.NetworkPeer.deserializeBinaryFromReader);
      msg.addPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkPeers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkPeers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkPeers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkPeers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getPeerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.NetworkPeer.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkPeers.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkPeers.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.NetworkPeers.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.NetworkPeers.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkPeers.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkPeers.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated NetworkPeer peer = 3;
 * @return {!Array<!proto.NetworkPeer>}
 */
proto.NetworkPeers.prototype.getPeerList = function() {
  return /** @type{!Array<!proto.NetworkPeer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NetworkPeer, 3));
};


/** @param {!Array<!proto.NetworkPeer>} value */
proto.NetworkPeers.prototype.setPeerList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.NetworkPeer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NetworkPeer}
 */
proto.NetworkPeers.prototype.addPeer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.NetworkPeer, opt_index);
};


proto.NetworkPeers.prototype.clearPeerList = function() {
  this.setPeerList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkPeer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkPeer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkPeer.displayName = 'proto.NetworkPeer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkPeer.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkPeer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkPeer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkPeer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hostname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 3, ""),
    status: jspb.Message.getFieldWithDefault(msg, 4, ""),
    datastore: jspb.Message.getFieldWithDefault(msg, 5, ""),
    plr: jspb.Message.getFieldWithDefault(msg, 6, ""),
    reductionRx: jspb.Message.getFieldWithDefault(msg, 7, 0),
    reductionTx: jspb.Message.getFieldWithDefault(msg, 8, 0),
    mac: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkPeer}
 */
proto.NetworkPeer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkPeer;
  return proto.NetworkPeer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkPeer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkPeer}
 */
proto.NetworkPeer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatastore(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlr(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReductionRx(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReductionTx(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMac(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkPeer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkPeer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkPeer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkPeer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDatastore();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPlr();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getReductionRx();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getReductionTx();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getMac();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.NetworkPeer.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkPeer.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string hostname = 2;
 * @return {string}
 */
proto.NetworkPeer.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.NetworkPeer.prototype.setHostname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ip = 3;
 * @return {string}
 */
proto.NetworkPeer.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.NetworkPeer.prototype.setIp = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string status = 4;
 * @return {string}
 */
proto.NetworkPeer.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.NetworkPeer.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string datastore = 5;
 * @return {string}
 */
proto.NetworkPeer.prototype.getDatastore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.NetworkPeer.prototype.setDatastore = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string plr = 6;
 * @return {string}
 */
proto.NetworkPeer.prototype.getPlr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.NetworkPeer.prototype.setPlr = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint32 reduction_rx = 7;
 * @return {number}
 */
proto.NetworkPeer.prototype.getReductionRx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.NetworkPeer.prototype.setReductionRx = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 reduction_tx = 8;
 * @return {number}
 */
proto.NetworkPeer.prototype.getReductionTx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.NetworkPeer.prototype.setReductionTx = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string mac = 9;
 * @return {string}
 */
proto.NetworkPeer.prototype.getMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.NetworkPeer.prototype.setMac = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkSessionsFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkSessionsFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkSessionsFilter.displayName = 'proto.NetworkSessionsFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkSessionsFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkSessionsFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkSessionsFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkSessionsFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    application: jspb.Message.getFieldWithDefault(msg, 2, 0),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    minBytes: jspb.Message.getFieldWithDefault(msg, 4, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 5, 0),
    period: jspb.Message.getFieldWithDefault(msg, 6, 0),
    orderBy: jspb.Message.getFieldWithDefault(msg, 7, 0),
    sort: jspb.Message.getFieldWithDefault(msg, 8, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 9, 0),
    page: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkSessionsFilter}
 */
proto.NetworkSessionsFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkSessionsFilter;
  return proto.NetworkSessionsFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkSessionsFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkSessionsFilter}
 */
proto.NetworkSessionsFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setApplication(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinBytes(value);
      break;
    case 5:
      var value = /** @type {!proto.NetworkDirectionEnum} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPeriod(value);
      break;
    case 7:
      var value = /** @type {!proto.NetworkOrderByEnum} */ (reader.readEnum());
      msg.setOrderBy(value);
      break;
    case 8:
      var value = /** @type {!proto.NetworkSortDirectionEnum} */ (reader.readEnum());
      msg.setSort(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkSessionsFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkSessionsFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkSessionsFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkSessionsFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApplication();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMinBytes();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getOrderBy();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getSort();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * optional string peer = 1;
 * @return {string}
 */
proto.NetworkSessionsFilter.prototype.getPeer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NetworkSessionsFilter.prototype.setPeer = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 application = 2;
 * @return {number}
 */
proto.NetworkSessionsFilter.prototype.getApplication = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.NetworkSessionsFilter.prototype.setApplication = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 port = 3;
 * @return {number}
 */
proto.NetworkSessionsFilter.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.NetworkSessionsFilter.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 min_bytes = 4;
 * @return {number}
 */
proto.NetworkSessionsFilter.prototype.getMinBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.NetworkSessionsFilter.prototype.setMinBytes = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional NetworkDirectionEnum direction = 5;
 * @return {!proto.NetworkDirectionEnum}
 */
proto.NetworkSessionsFilter.prototype.getDirection = function() {
  return /** @type {!proto.NetworkDirectionEnum} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.NetworkDirectionEnum} value */
proto.NetworkSessionsFilter.prototype.setDirection = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional uint32 period = 6;
 * @return {number}
 */
proto.NetworkSessionsFilter.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.NetworkSessionsFilter.prototype.setPeriod = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional NetworkOrderByEnum order_by = 7;
 * @return {!proto.NetworkOrderByEnum}
 */
proto.NetworkSessionsFilter.prototype.getOrderBy = function() {
  return /** @type {!proto.NetworkOrderByEnum} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.NetworkOrderByEnum} value */
proto.NetworkSessionsFilter.prototype.setOrderBy = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional NetworkSortDirectionEnum sort = 8;
 * @return {!proto.NetworkSortDirectionEnum}
 */
proto.NetworkSessionsFilter.prototype.getSort = function() {
  return /** @type {!proto.NetworkSortDirectionEnum} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.NetworkSortDirectionEnum} value */
proto.NetworkSessionsFilter.prototype.setSort = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional uint32 limit = 9;
 * @return {number}
 */
proto.NetworkSessionsFilter.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.NetworkSessionsFilter.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 page = 10;
 * @return {number}
 */
proto.NetworkSessionsFilter.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.NetworkSessionsFilter.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkSessionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkSessionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkSessionsRequest.displayName = 'proto.NetworkSessionsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkSessionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkSessionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkSessionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkSessionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    filter: (f = msg.getFilter()) && proto.NetworkSessionsFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkSessionsRequest}
 */
proto.NetworkSessionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkSessionsRequest;
  return proto.NetworkSessionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkSessionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkSessionsRequest}
 */
proto.NetworkSessionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.NetworkSessionsFilter;
      reader.readMessage(value,proto.NetworkSessionsFilter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkSessionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkSessionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkSessionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkSessionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NetworkSessionsFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkSessionsRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkSessionsRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional NetworkSessionsFilter filter = 2;
 * @return {?proto.NetworkSessionsFilter}
 */
proto.NetworkSessionsRequest.prototype.getFilter = function() {
  return /** @type{?proto.NetworkSessionsFilter} */ (
    jspb.Message.getWrapperField(this, proto.NetworkSessionsFilter, 2));
};


/** @param {?proto.NetworkSessionsFilter|undefined} value */
proto.NetworkSessionsRequest.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkSessionsRequest.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkSessionsRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkSessions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NetworkSessions.repeatedFields_, null);
};
goog.inherits(proto.NetworkSessions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkSessions.displayName = 'proto.NetworkSessions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NetworkSessions.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkSessions.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkSessions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkSessions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkSessions.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    totalItems: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sessionList: jspb.Message.toObjectList(msg.getSessionList(),
    proto.NetworkSession.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkSessions}
 */
proto.NetworkSessions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkSessions;
  return proto.NetworkSessions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkSessions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkSessions}
 */
proto.NetworkSessions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalItems(value);
      break;
    case 4:
      var value = new proto.NetworkSession;
      reader.readMessage(value,proto.NetworkSession.deserializeBinaryFromReader);
      msg.addSession(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkSessions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkSessions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkSessions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkSessions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getTotalItems();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSessionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.NetworkSession.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkSessions.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkSessions.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.NetworkSessions.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.NetworkSessions.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkSessions.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkSessions.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 total_items = 3;
 * @return {number}
 */
proto.NetworkSessions.prototype.getTotalItems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.NetworkSessions.prototype.setTotalItems = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated NetworkSession session = 4;
 * @return {!Array<!proto.NetworkSession>}
 */
proto.NetworkSessions.prototype.getSessionList = function() {
  return /** @type{!Array<!proto.NetworkSession>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NetworkSession, 4));
};


/** @param {!Array<!proto.NetworkSession>} value */
proto.NetworkSessions.prototype.setSessionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.NetworkSession=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NetworkSession}
 */
proto.NetworkSessions.prototype.addSession = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.NetworkSession, opt_index);
};


proto.NetworkSessions.prototype.clearSessionList = function() {
  this.setSessionList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkSession = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkSession, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkSession.displayName = 'proto.NetworkSession';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkSession.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkSession.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkSession} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkSession.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sourcePort: jspb.Message.getFieldWithDefault(msg, 2, 0),
    destination: jspb.Message.getFieldWithDefault(msg, 3, ""),
    destinationPort: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bytesLan: jspb.Message.getFieldWithDefault(msg, 5, 0),
    bytesWan: jspb.Message.getFieldWithDefault(msg, 6, 0),
    protocol: jspb.Message.getFieldWithDefault(msg, 7, ""),
    appId: jspb.Message.getFieldWithDefault(msg, 8, 0),
    reduction: jspb.Message.getFieldWithDefault(msg, 9, 0),
    time: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkSession}
 */
proto.NetworkSession.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkSession;
  return proto.NetworkSession.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkSession} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkSession}
 */
proto.NetworkSession.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSourcePort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestination(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDestinationPort(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytesLan(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytesWan(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocol(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReduction(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkSession.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkSession.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkSession} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkSession.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourcePort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDestination();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDestinationPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getBytesLan();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getBytesWan();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getProtocol();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getReduction();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.NetworkSession.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NetworkSession.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 source_port = 2;
 * @return {number}
 */
proto.NetworkSession.prototype.getSourcePort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.NetworkSession.prototype.setSourcePort = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string destination = 3;
 * @return {string}
 */
proto.NetworkSession.prototype.getDestination = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.NetworkSession.prototype.setDestination = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 destination_port = 4;
 * @return {number}
 */
proto.NetworkSession.prototype.getDestinationPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.NetworkSession.prototype.setDestinationPort = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 bytes_lan = 5;
 * @return {number}
 */
proto.NetworkSession.prototype.getBytesLan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.NetworkSession.prototype.setBytesLan = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 bytes_wan = 6;
 * @return {number}
 */
proto.NetworkSession.prototype.getBytesWan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.NetworkSession.prototype.setBytesWan = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string protocol = 7;
 * @return {string}
 */
proto.NetworkSession.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.NetworkSession.prototype.setProtocol = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint32 app_id = 8;
 * @return {number}
 */
proto.NetworkSession.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.NetworkSession.prototype.setAppId = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 reduction = 9;
 * @return {number}
 */
proto.NetworkSession.prototype.getReduction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.NetworkSession.prototype.setReduction = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string time = 10;
 * @return {string}
 */
proto.NetworkSession.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.NetworkSession.prototype.setTime = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkSessionDetailFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkSessionDetailFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkSessionDetailFilter.displayName = 'proto.NetworkSessionDetailFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkSessionDetailFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkSessionDetailFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkSessionDetailFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkSessionDetailFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destination: jspb.Message.getFieldWithDefault(msg, 2, ""),
    orderBy: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sort: jspb.Message.getFieldWithDefault(msg, 4, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    page: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkSessionDetailFilter}
 */
proto.NetworkSessionDetailFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkSessionDetailFilter;
  return proto.NetworkSessionDetailFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkSessionDetailFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkSessionDetailFilter}
 */
proto.NetworkSessionDetailFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestination(value);
      break;
    case 3:
      var value = /** @type {!proto.NetworkOrderByEnum} */ (reader.readEnum());
      msg.setOrderBy(value);
      break;
    case 4:
      var value = /** @type {!proto.NetworkSortDirectionEnum} */ (reader.readEnum());
      msg.setSort(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkSessionDetailFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkSessionDetailFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkSessionDetailFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkSessionDetailFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestination();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOrderBy();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSort();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.NetworkSessionDetailFilter.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NetworkSessionDetailFilter.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string destination = 2;
 * @return {string}
 */
proto.NetworkSessionDetailFilter.prototype.getDestination = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.NetworkSessionDetailFilter.prototype.setDestination = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional NetworkOrderByEnum order_by = 3;
 * @return {!proto.NetworkOrderByEnum}
 */
proto.NetworkSessionDetailFilter.prototype.getOrderBy = function() {
  return /** @type {!proto.NetworkOrderByEnum} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.NetworkOrderByEnum} value */
proto.NetworkSessionDetailFilter.prototype.setOrderBy = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional NetworkSortDirectionEnum sort = 4;
 * @return {!proto.NetworkSortDirectionEnum}
 */
proto.NetworkSessionDetailFilter.prototype.getSort = function() {
  return /** @type {!proto.NetworkSortDirectionEnum} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.NetworkSortDirectionEnum} value */
proto.NetworkSessionDetailFilter.prototype.setSort = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional uint32 limit = 5;
 * @return {number}
 */
proto.NetworkSessionDetailFilter.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.NetworkSessionDetailFilter.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 page = 6;
 * @return {number}
 */
proto.NetworkSessionDetailFilter.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.NetworkSessionDetailFilter.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkSessionDetailRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkSessionDetailRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkSessionDetailRequest.displayName = 'proto.NetworkSessionDetailRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkSessionDetailRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkSessionDetailRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkSessionDetailRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkSessionDetailRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    filter: (f = msg.getFilter()) && proto.NetworkSessionDetailFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkSessionDetailRequest}
 */
proto.NetworkSessionDetailRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkSessionDetailRequest;
  return proto.NetworkSessionDetailRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkSessionDetailRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkSessionDetailRequest}
 */
proto.NetworkSessionDetailRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.NetworkSessionDetailFilter;
      reader.readMessage(value,proto.NetworkSessionDetailFilter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkSessionDetailRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkSessionDetailRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkSessionDetailRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkSessionDetailRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NetworkSessionDetailFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkSessionDetailRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkSessionDetailRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional NetworkSessionDetailFilter filter = 2;
 * @return {?proto.NetworkSessionDetailFilter}
 */
proto.NetworkSessionDetailRequest.prototype.getFilter = function() {
  return /** @type{?proto.NetworkSessionDetailFilter} */ (
    jspb.Message.getWrapperField(this, proto.NetworkSessionDetailFilter, 2));
};


/** @param {?proto.NetworkSessionDetailFilter|undefined} value */
proto.NetworkSessionDetailRequest.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkSessionDetailRequest.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkSessionDetailRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkSessionDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NetworkSessionDetail.repeatedFields_, null);
};
goog.inherits(proto.NetworkSessionDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkSessionDetail.displayName = 'proto.NetworkSessionDetail';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NetworkSessionDetail.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkSessionDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkSessionDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkSessionDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkSessionDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    totalItems: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sessionList: jspb.Message.toObjectList(msg.getSessionList(),
    proto.NetworkSession.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkSessionDetail}
 */
proto.NetworkSessionDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkSessionDetail;
  return proto.NetworkSessionDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkSessionDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkSessionDetail}
 */
proto.NetworkSessionDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalItems(value);
      break;
    case 4:
      var value = new proto.NetworkSession;
      reader.readMessage(value,proto.NetworkSession.deserializeBinaryFromReader);
      msg.addSession(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkSessionDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkSessionDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkSessionDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkSessionDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getTotalItems();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSessionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.NetworkSession.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkSessionDetail.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkSessionDetail.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.NetworkSessionDetail.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.NetworkSessionDetail.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkSessionDetail.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkSessionDetail.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 total_items = 3;
 * @return {number}
 */
proto.NetworkSessionDetail.prototype.getTotalItems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.NetworkSessionDetail.prototype.setTotalItems = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated NetworkSession session = 4;
 * @return {!Array<!proto.NetworkSession>}
 */
proto.NetworkSessionDetail.prototype.getSessionList = function() {
  return /** @type{!Array<!proto.NetworkSession>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NetworkSession, 4));
};


/** @param {!Array<!proto.NetworkSession>} value */
proto.NetworkSessionDetail.prototype.setSessionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.NetworkSession=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NetworkSession}
 */
proto.NetworkSessionDetail.prototype.addSession = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.NetworkSession, opt_index);
};


proto.NetworkSessionDetail.prototype.clearSessionList = function() {
  this.setSessionList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkTopApplicationsFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkTopApplicationsFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkTopApplicationsFilter.displayName = 'proto.NetworkTopApplicationsFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkTopApplicationsFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkTopApplicationsFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkTopApplicationsFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkTopApplicationsFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    top: jspb.Message.getFieldWithDefault(msg, 2, 0),
    period: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkTopApplicationsFilter}
 */
proto.NetworkTopApplicationsFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkTopApplicationsFilter;
  return proto.NetworkTopApplicationsFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkTopApplicationsFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkTopApplicationsFilter}
 */
proto.NetworkTopApplicationsFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTop(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkTopApplicationsFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkTopApplicationsFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkTopApplicationsFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkTopApplicationsFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTop();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string peer = 1;
 * @return {string}
 */
proto.NetworkTopApplicationsFilter.prototype.getPeer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NetworkTopApplicationsFilter.prototype.setPeer = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 top = 2;
 * @return {number}
 */
proto.NetworkTopApplicationsFilter.prototype.getTop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.NetworkTopApplicationsFilter.prototype.setTop = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 period = 3;
 * @return {number}
 */
proto.NetworkTopApplicationsFilter.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.NetworkTopApplicationsFilter.prototype.setPeriod = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkTopApplicationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkTopApplicationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkTopApplicationsRequest.displayName = 'proto.NetworkTopApplicationsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkTopApplicationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkTopApplicationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkTopApplicationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkTopApplicationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    filter: (f = msg.getFilter()) && proto.NetworkTopApplicationsFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkTopApplicationsRequest}
 */
proto.NetworkTopApplicationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkTopApplicationsRequest;
  return proto.NetworkTopApplicationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkTopApplicationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkTopApplicationsRequest}
 */
proto.NetworkTopApplicationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.NetworkTopApplicationsFilter;
      reader.readMessage(value,proto.NetworkTopApplicationsFilter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkTopApplicationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkTopApplicationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkTopApplicationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkTopApplicationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NetworkTopApplicationsFilter.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkTopApplicationsRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkTopApplicationsRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional NetworkTopApplicationsFilter filter = 2;
 * @return {?proto.NetworkTopApplicationsFilter}
 */
proto.NetworkTopApplicationsRequest.prototype.getFilter = function() {
  return /** @type{?proto.NetworkTopApplicationsFilter} */ (
    jspb.Message.getWrapperField(this, proto.NetworkTopApplicationsFilter, 2));
};


/** @param {?proto.NetworkTopApplicationsFilter|undefined} value */
proto.NetworkTopApplicationsRequest.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkTopApplicationsRequest.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkTopApplicationsRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkTopApplications = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NetworkTopApplications.repeatedFields_, null);
};
goog.inherits(proto.NetworkTopApplications, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkTopApplications.displayName = 'proto.NetworkTopApplications';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NetworkTopApplications.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkTopApplications.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkTopApplications.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkTopApplications} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkTopApplications.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    applicationList: jspb.Message.toObjectList(msg.getApplicationList(),
    proto.NetworkTopApplication.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkTopApplications}
 */
proto.NetworkTopApplications.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkTopApplications;
  return proto.NetworkTopApplications.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkTopApplications} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkTopApplications}
 */
proto.NetworkTopApplications.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.NetworkTopApplication;
      reader.readMessage(value,proto.NetworkTopApplication.deserializeBinaryFromReader);
      msg.addApplication(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkTopApplications.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkTopApplications.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkTopApplications} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkTopApplications.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getApplicationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.NetworkTopApplication.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkTopApplications.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkTopApplications.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.NetworkTopApplications.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.NetworkTopApplications.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkTopApplications.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkTopApplications.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated NetworkTopApplication application = 3;
 * @return {!Array<!proto.NetworkTopApplication>}
 */
proto.NetworkTopApplications.prototype.getApplicationList = function() {
  return /** @type{!Array<!proto.NetworkTopApplication>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NetworkTopApplication, 3));
};


/** @param {!Array<!proto.NetworkTopApplication>} value */
proto.NetworkTopApplications.prototype.setApplicationList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.NetworkTopApplication=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NetworkTopApplication}
 */
proto.NetworkTopApplications.prototype.addApplication = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.NetworkTopApplication, opt_index);
};


proto.NetworkTopApplications.prototype.clearApplicationList = function() {
  this.setApplicationList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkTopApplication = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkTopApplication, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkTopApplication.displayName = 'proto.NetworkTopApplication';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkTopApplication.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkTopApplication.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkTopApplication} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkTopApplication.toObject = function(includeInstance, msg) {
  var f, obj = {
    application: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bytesLan: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bytesWan: jspb.Message.getFieldWithDefault(msg, 3, 0),
    reduction: jspb.Message.getFieldWithDefault(msg, 4, 0),
    percentageLan: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    percentageWan: +jspb.Message.getFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkTopApplication}
 */
proto.NetworkTopApplication.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkTopApplication;
  return proto.NetworkTopApplication.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkTopApplication} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkTopApplication}
 */
proto.NetworkTopApplication.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApplication(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBytesLan(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBytesWan(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReduction(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercentageLan(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPercentageWan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkTopApplication.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkTopApplication.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkTopApplication} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkTopApplication.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplication();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBytesLan();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBytesWan();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getReduction();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getPercentageLan();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getPercentageWan();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional string application = 1;
 * @return {string}
 */
proto.NetworkTopApplication.prototype.getApplication = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NetworkTopApplication.prototype.setApplication = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 bytes_lan = 2;
 * @return {number}
 */
proto.NetworkTopApplication.prototype.getBytesLan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.NetworkTopApplication.prototype.setBytesLan = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 bytes_wan = 3;
 * @return {number}
 */
proto.NetworkTopApplication.prototype.getBytesWan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.NetworkTopApplication.prototype.setBytesWan = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 reduction = 4;
 * @return {number}
 */
proto.NetworkTopApplication.prototype.getReduction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.NetworkTopApplication.prototype.setReduction = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double percentage_lan = 5;
 * @return {number}
 */
proto.NetworkTopApplication.prototype.getPercentageLan = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.NetworkTopApplication.prototype.setPercentageLan = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double percentage_wan = 6;
 * @return {number}
 */
proto.NetworkTopApplication.prototype.getPercentageWan = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.NetworkTopApplication.prototype.setPercentageWan = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkApplicationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkApplicationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkApplicationsRequest.displayName = 'proto.NetworkApplicationsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkApplicationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkApplicationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkApplicationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkApplicationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkApplicationsRequest}
 */
proto.NetworkApplicationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkApplicationsRequest;
  return proto.NetworkApplicationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkApplicationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkApplicationsRequest}
 */
proto.NetworkApplicationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkApplicationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkApplicationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkApplicationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkApplicationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkApplicationsRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkApplicationsRequest.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkApplications = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NetworkApplications.repeatedFields_, null);
};
goog.inherits(proto.NetworkApplications, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkApplications.displayName = 'proto.NetworkApplications';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NetworkApplications.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkApplications.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkApplications.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkApplications} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkApplications.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f),
    applicationList: jspb.Message.toObjectList(msg.getApplicationList(),
    proto.NetworkApplication.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkApplications}
 */
proto.NetworkApplications.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkApplications;
  return proto.NetworkApplications.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkApplications} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkApplications}
 */
proto.NetworkApplications.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.NetworkApplication;
      reader.readMessage(value,proto.NetworkApplication.deserializeBinaryFromReader);
      msg.addApplication(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkApplications.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkApplications.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkApplications} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkApplications.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getApplicationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.NetworkApplication.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.NetworkApplications.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkApplications.prototype.setRequestId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.NetworkApplications.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.NetworkApplications.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NetworkApplications.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkApplications.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated NetworkApplication application = 3;
 * @return {!Array<!proto.NetworkApplication>}
 */
proto.NetworkApplications.prototype.getApplicationList = function() {
  return /** @type{!Array<!proto.NetworkApplication>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NetworkApplication, 3));
};


/** @param {!Array<!proto.NetworkApplication>} value */
proto.NetworkApplications.prototype.setApplicationList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.NetworkApplication=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NetworkApplication}
 */
proto.NetworkApplications.prototype.addApplication = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.NetworkApplication, opt_index);
};


proto.NetworkApplications.prototype.clearApplicationList = function() {
  this.setApplicationList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkApplication = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkApplication, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkApplication.displayName = 'proto.NetworkApplication';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkApplication.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkApplication.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkApplication} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkApplication.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkApplication}
 */
proto.NetworkApplication.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkApplication;
  return proto.NetworkApplication.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkApplication} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkApplication}
 */
proto.NetworkApplication.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkApplication.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkApplication.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkApplication} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkApplication.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.NetworkApplication.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NetworkApplication.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.NetworkApplication.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.NetworkApplication.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.NetworkDirectionEnum = {
  BOTH: 0,
  WAN_IN: 1,
  WAN_OUT: 2
};

/**
 * @enum {number}
 */
proto.NetworkOrderByEnum = {
  REDUCTION: 0,
  SOURCE: 1,
  DESTINATION: 2,
  BYTES_LAN: 3,
  BYTES_WAN: 4,
  APPLICATION: 5,
  TIME: 6
};

/**
 * @enum {number}
 */
proto.NetworkSortDirectionEnum = {
  DESCENDING: 0,
  ASCENDING: 1
};

goog.object.extend(exports, proto);
